[
    {
        "id": "5f562f66.a301e",
        "type": "tab",
        "label": "Device A",
        "disabled": false,
        "info": ""
    },
    {
        "id": "c4285970.3276d8",
        "type": "tab",
        "label": "web-app",
        "disabled": false,
        "info": ""
    },
    {
        "id": "eaa5749e.352818",
        "type": "tab",
        "label": "Setup Wireless SSID",
        "disabled": false,
        "info": ""
    },
    {
        "id": "2c5d25cb.3428ca",
        "type": "subflow",
        "name": "App NavBar",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "c104210d.418eb"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 80,
                "wires": [
                    {
                        "id": "c104210d.418eb",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "ca529822.9112f8",
        "type": "subflow",
        "name": "HTML",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 40,
                "wires": [
                    {
                        "id": "99bb1519.85fc18"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "e3c68b88.d82258",
        "type": "subflow",
        "name": "App CSS",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "f5a9eda8.5c5bc"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 320,
                "y": 80,
                "wires": [
                    {
                        "id": "f5a9eda8.5c5bc",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "8341090a.df9758",
        "type": "subflow",
        "name": "App HTML",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "966e270e.701e48"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "6ad7c930.1a06b8",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey"
            }
        },
        "site": {
            "name": "R3 Oscillation Overthruster",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "44b51478.9c022c",
        "type": "websocket-listener",
        "path": "/rfill/websocket",
        "wholemsg": "false"
    },
    {
        "id": "c427a7cd.35f1f8",
        "type": "websocket-listener",
        "path": "/setup/websocket",
        "wholemsg": "false"
    },
    {
        "id": "7c22f36f.fb7a4c",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "67d6e9be.8270f8",
        "type": "ui_group",
        "name": "Bunch Data",
        "tab": "7c22f36f.fb7a4c",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "79250bf3.365cc4",
        "type": "mqtt-broker",
        "name": "MQTT Broker",
        "broker": "$(MQTTSERVERIP)",
        "port": "1883",
        "clientid": "$(MQTTCLIENTID)",
        "usetls": false,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "e1c6f2d2.ea0b9",
        "type": "websocket-listener",
        "path": "/oo-spec/websocket",
        "wholemsg": "false"
    },
    {
        "id": "d545aab1.0cf9d8",
        "type": "websocket-listener",
        "path": "/oo-display/websocket",
        "wholemsg": "false"
    },
    {
        "id": "10999d86.32cb82",
        "type": "websocket-listener",
        "path": "/comfort/websocket",
        "wholemsg": "false"
    },
    {
        "id": "30f384ea.cf21fc",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Save device config in Memory",
        "func": "msg.payload.reset.value = 0;\nvar device = msg.payload;\nflow.set('device', device);\nflow.set('newSetting', 1);\nfor (var ibunch = 0; ibunch < 176; ++ibunch) \n{\n    device.bunchCurrent.value[0][ibunch] = ibunch;\n    device.bunchCurrent.value[1][ibunch] = 0.0;\n    device.phase.value[0][ibunch] = ibunch;\n    device.phase.value[1][ibunch] = 0.0;\n    device.difPhase.value[0][ibunch] = ibunch;\n    device.difPhase.value[1][ibunch] = 0.0;\n}\nfor (var imode = 0; imode < 88; ++imode)\n{\n    device.modeM.value[0][imode] = imode;\n    device.modeM.value[1][imode] = 0.0;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 830,
        "y": 40,
        "wires": [
            [
                "89892a30.598e28",
                "c7bd6706.673068"
            ]
        ]
    },
    {
        "id": "9115ea87.0ca208",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Readings Alarm Scan",
        "func": "if (!msg.payload) return null;\nvar device = flow.get('device');\ndevice.linkQuality.value     = global.get('linkQuality');\ndevice.signalLevel.value     = global.get('signalLevel');\nscalarAlarmScan(device, 'reading');\nvar newMsg = \n{\n    topic: flow.get('deviceProps').project + '/' + flow.get('deviceProps').deviceType + '/' + flow.get('deviceProps').name + '/reading',\n    payload: JSON.stringify(device)\n}\nreturn newMsg;\n\nfunction getActionArray(device, type, actionType)\n{\n    var actionArray = [];\n    var keys = Object.keys(device);\n    for (var ii = 0; ii < keys.length; ++ii)\n    {\n        if (device[keys[ii]].hasOwnProperty('type'))\n        {\n            if (device[keys[ii]].type == type)\n            {\n                if (device[keys[ii]].action == actionType)\n                {\n                    actionArray.push(device[keys[ii]]);\n                }\n            }\n        }\n    }\n    return actionArray;\n}\nfunction scalarAlarmScan(device, actionType)\n{\n    var actionArray = getActionArray(device, 'scalar', actionType);\n    if (actionArray.length > 0)\n    {\n        for (var ii = 0; ii < actionArray.length; ++ii)\n        {\n            actionArray[ii].alarm.value = 0;\n            if (!isNaN(actionArray[ii].value))\n            {\n                if (actionArray[ii].value < actionArray[ii].alarm.limits.low)  actionArray[ii].alarm.value = 1;\n                if (actionArray[ii].value < actionArray[ii].alarm.limits.lolo) actionArray[ii].alarm.value = 3;\n                if (actionArray[ii].value > actionArray[ii].alarm.limits.high) actionArray[ii].alarm.value = 2;\n                if (actionArray[ii].value > actionArray[ii].alarm.limits.hihi) actionArray[ii].alarm.value = 4;\n            }\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 780,
        "y": 400,
        "wires": [
            [
                "27095148.93187e"
            ]
        ]
    },
    {
        "id": "a3ff8e5.b79de7",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Prepare MQTT topic",
        "func": "var mqttArray = msg.topic.split('/');\nvar device = \n{\n    project     : mqttArray[0],\n    deviceType  : mqttArray[1],\n    name        : mqttArray[2],\n    prop        : mqttArray[3],\n};\nreturn {topic : msg.topic, payload:{topic:'readings', mqttDevice : device, payload:msg.payload}};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1300,
        "y": 460,
        "wires": [
            [
                "1cdcbcd8.9514e3"
            ]
        ]
    },
    {
        "id": "1482e22f.57fa2e",
        "type": "http in",
        "z": "c4285970.3276d8",
        "name": "/rfill",
        "url": "/rfill",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 90,
        "y": 260,
        "wires": [
            [
                "71ce0943.81bf18"
            ]
        ]
    },
    {
        "id": "70be1872.dfaf48",
        "type": "http in",
        "z": "c4285970.3276d8",
        "name": "/apps",
        "url": "/apps",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 90,
        "y": 180,
        "wires": [
            [
                "af9642ae.0c0da"
            ]
        ]
    },
    {
        "id": "b1885d32.8d9cc",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "Body",
        "field": "payload.body",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!-- Body HTML -->\n    <div class='container' width=\"100%\">\n        <div class='row vert-pad' >\n            <div class='col-md-12'>\n                <a class=\"btn jumbotron-button btn-block big-text bold-text\" width='80%' href=\"/comfort?name={{{payload.deviceAName}}}\" >\n                    <table width=\"100%\" alight=\"left\">\n                        <tr>\n                            <td width=\"30%\" align='center'> <img src=\"/img/comfortYellow.png\" height=\"70px\"/></td>\n                            <td width=\"70%\" align=\"left\">{{{payload.deviceAName}}} Comfort Display</td>\n                        </tr>\n                    </table>\n                </a>\n            </div>\n        </div>\n        <div class='row vert-pad' >\n            <div class='col-md-12'>\n                <a class=\"btn jumbotron-button btn-block big-text bold-text\" width='80%' href=\"/rfill?name={{{payload.deviceAName}}}\" >\n                    <table width=\"100%\" alight=\"left\">\n                        <tr>\n                            <td width=\"30%\" align='center'> <img src=\"/img/bucketYellow.png\" height=\"70px\"/></td>\n                            <td width=\"70%\" align=\"left\">{{{payload.deviceAName}}} Fill Pattern</td>\n                        </tr>\n                    </table>\n                </a>\n            </div>\n        </div>\n        <div class='row vert-pad' >\n            <div class='col-md-12'>\n                <a class=\"btn jumbotron-button btn-block big-text bold-text\" width='80%' href=\"/oo-spec?name={{{payload.deviceAName}}}\" >\n                    <table width=\"100%\" alight=\"left\">\n                        <tr>\n                            <td width=\"30%\" align='center'> <img src=\"/img/yellowSpectrum.png\" height=\"70px\"/></td>\n                            <td width=\"70%\" align=\"left\">{{{payload.deviceAName}}} Spectrogram</td>\n                        </tr>\n                    </table>\n                </a>\n            </div>\n        </div>\n        <div class='row vert-pad' >\n            <div class='col-md-12'>\n                <a class=\"btn jumbotron-button btn-block big-text bold-text\" width='80%' href=\"/oo-display?name={{{payload.deviceAName}}}\" >\n                    <table width=\"100%\" alight=\"left\">\n                        <tr>\n                            <td width=\"30%\" align='center'> <img src=\"/img/yellowSpaceShip.png\" height=\"70px\"/></td>\n                            <td width=\"70%\" align=\"left\">{{{payload.deviceAName}}} Display</td>\n                        </tr>\n                    </table>\n                </a>\n            </div>\n        </div>\n        <div class='row vert-pad' >\n            <div class='col-md-12'>\n                <a class=\"btn jumbotron-button btn-block big-text bold-text\" width='80%' href=\"/setup\" >\n                    <table width=\"100%\" alight=\"left\">\n                        <tr>\n                            <td width=\"30%\" align='center'> <img src=\"/img/basicYellow.png\" height=\"70px\"/></td>\n                            <td width=\"70%\" align=\"left\">Setup</td>\n                        </tr>\n                    </table>\n                </a>\n            </div>\n        </div>\n    </div>",
        "output": "str",
        "x": 830,
        "y": 180,
        "wires": [
            [
                "c6d4dfc7.827cb"
            ]
        ]
    },
    {
        "id": "18e277b4.8fc208",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "Title",
        "field": "payload.title",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "Oscillation Overthruster",
        "output": "str",
        "x": 550,
        "y": 180,
        "wires": [
            [
                "fd81c62c.98f018"
            ]
        ]
    },
    {
        "id": "f328fcb4.91dc",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "JavaScript",
        "field": "payload.javascript",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "        useWebSockets(false);\n        function onDocumentReady()\n        {\n        }\n        function onWebSocketOpen()\n        {\n        }\n        function onWebSocketClose()\n        {\n            \n        }\n        function onWebSocketMessage(msg)\n        {\n        }\n\n",
        "output": "str",
        "x": 410,
        "y": 180,
        "wires": [
            [
                "18e277b4.8fc208"
            ]
        ]
    },
    {
        "id": "fd81c62c.98f018",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "navBarIcon",
        "field": "payload.navBarIcon",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "yellowSpaceShip.png",
        "output": "str",
        "x": 690,
        "y": 180,
        "wires": [
            [
                "b1885d32.8d9cc"
            ]
        ]
    },
    {
        "id": "49c7b59e.00e86c",
        "type": "inject",
        "z": "5f562f66.a301e",
        "name": "deviceA",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "deviceA",
        "payload": "MQTTDEVICEA",
        "payloadType": "env",
        "x": 100,
        "y": 40,
        "wires": [
            [
                "f7b2b73c.569598"
            ]
        ]
    },
    {
        "id": "4a8d91e8.fcb68",
        "type": "file in",
        "z": "5f562f66.a301e",
        "name": "Read device config",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 470,
        "y": 40,
        "wires": [
            [
                "4b0be623.7f7b88"
            ]
        ]
    },
    {
        "id": "4b0be623.7f7b88",
        "type": "json",
        "z": "5f562f66.a301e",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 630,
        "y": 40,
        "wires": [
            [
                "30f384ea.cf21fc"
            ]
        ]
    },
    {
        "id": "f7b2b73c.569598",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Init flow Variables",
        "func": "var mqttSplit = msg.payload.split('/');\nvar deviceProps = {\n    project     :   mqttSplit[0],\n    deviceType  :   mqttSplit[1],\n    name        :   mqttSplit[2],\n    configFile  :   mqttSplit[1] + '-' + mqttSplit[2] + '.json'\n};\nflow.set('deviceProps',deviceProps);\nflow.set('newSetting',0);\nreturn {topic: 'readFile', 'filename':deviceProps.configFile};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 270,
        "y": 40,
        "wires": [
            [
                "4a8d91e8.fcb68"
            ]
        ]
    },
    {
        "id": "257906ae.f6991a",
        "type": "json",
        "z": "5f562f66.a301e",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 270,
        "y": 140,
        "wires": [
            [
                "c2106663.a49658"
            ]
        ]
    },
    {
        "id": "c2106663.a49658",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Filter MQTT",
        "func": "return {topic:msg.topic.split('/')[3], payload:msg.payload};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 410,
        "y": 140,
        "wires": [
            [
                "9e75e21c.458df"
            ]
        ]
    },
    {
        "id": "9e75e21c.458df",
        "type": "switch",
        "z": "5f562f66.a301e",
        "name": "mqtt topic",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "setting",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ping",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 600,
        "y": 140,
        "wires": [
            [
                "42c6e9ce.4932e8"
            ],
            [
                "9115ea87.0ca208"
            ]
        ]
    },
    {
        "id": "168ce872.83d788",
        "type": "file",
        "z": "5f562f66.a301e",
        "name": "Init Settings",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1410,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "89892a30.598e28",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Make Pretty",
        "func": "var jsonPretty = JSON.stringify(msg.payload,null,2);\nreturn {topic: msg.payload, payload:jsonPretty, 'filename':flow.get('deviceProps').configFile};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1230,
        "y": 120,
        "wires": [
            [
                "168ce872.83d788"
            ]
        ]
    },
    {
        "id": "d2572e9a.d2ef9",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Settings Alarm Scan",
        "func": "scalarAlarmScan(msg.payload, 'setting');\nflow.set('device', msg.payload); \nflow.set('newSetting', 1); \nreturn msg;\n\nfunction getActionArray(device, type, actionType)\n{\n    var actionArray = [];\n    var keys = Object.keys(device);\n    for (var ii = 0; ii < keys.length; ++ii)\n    {\n        if (device[keys[ii]].hasOwnProperty('type'))\n        {\n            if (device[keys[ii]].type == type)\n            {\n                if (device[keys[ii]].action == actionType)\n                {\n                    actionArray.push(device[keys[ii]]);\n                }\n            }\n        }\n    }\n    return actionArray;\n}\nfunction scalarAlarmScan(device, actionType)\n{\n    var actionArray = getActionArray(device, 'scalar', actionType);\n    if (actionArray.length > 0)\n    {\n        for (var ii = 0; ii < actionArray.length; ++ii)\n        {\n            actionArray[ii].alarm.value = 0;\n            if (!isNaN(actionArray[ii].value))\n            {\n                if (actionArray[ii].value < actionArray[ii].alarm.limits.low)  actionArray[ii].alarm.value = 1;\n                if (actionArray[ii].value < actionArray[ii].alarm.limits.lolo) actionArray[ii].alarm.value = 3;\n                if (actionArray[ii].value > actionArray[ii].alarm.limits.high) actionArray[ii].alarm.value = 2;\n                if (actionArray[ii].value > actionArray[ii].alarm.limits.hihi) actionArray[ii].alarm.value = 4;\n            }\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1040,
        "y": 120,
        "wires": [
            [
                "89892a30.598e28",
                "557e4f40.b904e",
                "c7bd6706.673068"
            ]
        ]
    },
    {
        "id": "27095148.93187e",
        "type": "delay",
        "z": "5f562f66.a301e",
        "name": "Limit 1 Hz",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "x": 960,
        "y": 400,
        "wires": [
            [
                "d976b431.f90598"
            ]
        ]
    },
    {
        "id": "ba79496e.4e42b8",
        "type": "exec",
        "z": "c4285970.3276d8",
        "command": "iwconfig",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 680,
        "y": 40,
        "wires": [
            [
                "25a2b2c8.26f4ce"
            ],
            [],
            []
        ]
    },
    {
        "id": "fc7d9351.a3d0a",
        "type": "inject",
        "z": "c4285970.3276d8",
        "name": "",
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 520,
        "y": 40,
        "wires": [
            [
                "ba79496e.4e42b8"
            ]
        ]
    },
    {
        "id": "25a2b2c8.26f4ce",
        "type": "function",
        "z": "c4285970.3276d8",
        "name": "Get Signal Quality",
        "func": "var info = msg.payload;\nvar linkStartIndex  = info.indexOf('Link Quality=');\nvar levelStartIndex = info.indexOf('Signal level=');\nvar linkQuality = Number(info.substring(linkStartIndex + 13, linkStartIndex + 15));\nvar signalLevel =  Number(info.substring(levelStartIndex + 13, levelStartIndex + 16));\nvar ssid = info.substring(info.indexOf('ESSID') + 7);\nssid = ssid.substring(0,ssid.indexOf('\"'));\nvar val = {linkQuality : linkQuality, signalLevel: signalLevel, ssid:ssid};\nglobal.set('linkQuality',linkQuality);\nglobal.set('signalLevel', signalLevel);\nglobal.set('ssid', ssid);\nreturn {topic :'test',payload : val};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 860,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "cf44f6bf.8956b8",
        "type": "websocket in",
        "z": "c4285970.3276d8",
        "name": "/rfill/websocket",
        "server": "44b51478.9c022c",
        "client": "",
        "x": 120,
        "y": 440,
        "wires": [
            [
                "ea909034.6fb25"
            ]
        ]
    },
    {
        "id": "62aaa250.9b67dc",
        "type": "websocket out",
        "z": "c4285970.3276d8",
        "name": "/rfill/websocket",
        "server": "44b51478.9c022c",
        "client": "",
        "x": 800,
        "y": 440,
        "wires": []
    },
    {
        "id": "ea909034.6fb25",
        "type": "link out",
        "z": "c4285970.3276d8",
        "name": "rfill  Web socket out",
        "links": [
            "2f289f87.fe2ff"
        ],
        "x": 295,
        "y": 440,
        "wires": []
    },
    {
        "id": "d033193d.436d68",
        "type": "link in",
        "z": "c4285970.3276d8",
        "name": "rfill Web socket in",
        "links": [
            "1cdcbcd8.9514e3"
        ],
        "x": 655,
        "y": 440,
        "wires": [
            [
                "62aaa250.9b67dc"
            ]
        ]
    },
    {
        "id": "2f289f87.fe2ff",
        "type": "link in",
        "z": "5f562f66.a301e",
        "name": "Device A web socket in",
        "links": [
            "ea909034.6fb25",
            "cf44c9f4.bf1b48",
            "ffbf08a6.d628b8",
            "fb7ff61d.e65b38"
        ],
        "x": 35,
        "y": 240,
        "wires": [
            [
                "f812bb6a.1aec68"
            ]
        ]
    },
    {
        "id": "f812bb6a.1aec68",
        "type": "json",
        "z": "5f562f66.a301e",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 130,
        "y": 240,
        "wires": [
            [
                "87f08687.b6d578"
            ]
        ]
    },
    {
        "id": "1cdcbcd8.9514e3",
        "type": "link out",
        "z": "5f562f66.a301e",
        "name": "Device A web socket out",
        "links": [
            "58095040.115ef",
            "d033193d.436d68",
            "b1a0e1bd.59cdb",
            "ef138f17.a4ab5"
        ],
        "x": 1435,
        "y": 460,
        "wires": []
    },
    {
        "id": "d976b431.f90598",
        "type": "gzip",
        "z": "5f562f66.a301e",
        "name": "",
        "x": 1090,
        "y": 400,
        "wires": [
            [
                "a3ff8e5.b79de7",
                "cbea1b0d.f5d6d8"
            ]
        ]
    },
    {
        "id": "42c6e9ce.4932e8",
        "type": "gzip",
        "z": "5f562f66.a301e",
        "name": "",
        "x": 750,
        "y": 120,
        "wires": [
            [
                "cd99fe0e.38599"
            ]
        ]
    },
    {
        "id": "cd99fe0e.38599",
        "type": "json",
        "z": "5f562f66.a301e",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 870,
        "y": 120,
        "wires": [
            [
                "d2572e9a.d2ef9"
            ]
        ]
    },
    {
        "id": "f14573da.0a788",
        "type": "inject",
        "z": "c4285970.3276d8",
        "name": "project",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "project",
        "payload": "PROJECT",
        "payloadType": "env",
        "x": 1080,
        "y": 40,
        "wires": [
            [
                "938904a0.58d668"
            ]
        ]
    },
    {
        "id": "938904a0.58d668",
        "type": "function",
        "z": "c4285970.3276d8",
        "name": "Save global env variables",
        "func": "global.set(msg.topic,msg.payload);\nreturn null;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1270,
        "y": 40,
        "wires": []
    },
    {
        "id": "da43afe.8d4f85",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Filter Websocket",
        "func": "var inputDeviceProps = msg.payload.topic.split('/');\nvar deviceProps = flow.get('deviceProps')\nif (inputDeviceProps[0] != deviceProps.project) return null;\nif (inputDeviceProps[1] != deviceProps.deviceType) return null;\nif (inputDeviceProps[2] != deviceProps.name) return null;\nreturn {topic:msg.topic, payload:msg.payload.payload};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 450,
        "y": 240,
        "wires": [
            [
                "9e75e21c.458df"
            ]
        ]
    },
    {
        "id": "87f08687.b6d578",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Shift Msg",
        "func": "return msg.payload;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 270,
        "y": 240,
        "wires": [
            [
                "da43afe.8d4f85"
            ]
        ]
    },
    {
        "id": "71ce0943.81bf18",
        "type": "function",
        "z": "c4285970.3276d8",
        "name": "Set Name And Device Type",
        "func": "msg.payload['script'] = {};\nmsg.payload['script']['name'] = msg.payload.name\nmsg.payload['script']['deviceType'] = 'osc-over';\nmsg.payload['script']['project'] = global.get('project');\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 320,
        "y": 260,
        "wires": [
            [
                "6533b535.454c4c"
            ]
        ]
    },
    {
        "id": "c76a9544.852e88",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "Set Title",
        "field": "payload.title",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "R3 Fill Pattern",
        "output": "str",
        "x": 260,
        "y": 340,
        "wires": [
            [
                "c98976c.3996888"
            ]
        ]
    },
    {
        "id": "c98976c.3996888",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "script.global",
        "field": "payload.script.global",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "// Global Javascript\n        useWebSockets(true);\n        var mqttDevice = null;\n        var device = null;\n        var pingInterval = 5000;\n        var lastPing = 0;\n\n        var restfulDevice = \n        {\n            deviceType  : '{{{payload.script.deviceType}}}',\n            name        : '{{{payload.script.name}}}',\n            project     : '{{{payload.script.project}}}'\n        };\n\n        function onDocumentReady()\n        {\n            setRemoteApp(false);\n            if (remoteApp)\n            {\n                getCreds();\n                setInterval(function(){getCreds();}, 1000);\n            }\n            else\n            {\n                $('#userCardId').hide();\n            }\n            setInterval(function()\n            {\n                var now = new Date().getTime();\n                if ((now - lastPing) > pingInterval)\n                {\n                    lastPing = now;\n                    var actionMsg = \n                        {\n                            topic   : restfulDevice.project + '/' +  restfulDevice.deviceType + '/' +  restfulDevice.name + '/ping',\n                            payload : true\n                        };\n                    sendActionMsg('ping', 'ping', actionMsg);\n               }\n            }, 1000);\n        }\n        function onWebSocketOpen()\n        {\n            acknowledgeDialog('Alert', 'Wait!', 'Contacting the Mother Ship...');\n        }\n        function onWebSocketClose()\n        {\n            \n        }\n        function onWebSocketMessage(msg)\n        {\n            switch(msg.topic)\n            {\n                case 'readings':\n                    if ((msg.mqttDevice.name == restfulDevice.name) && (msg.mqttDevice.deviceType == restfulDevice.deviceType)  && (msg.mqttDevice.project == restfulDevice.project) )\n                    {\n                        lastPing = new Date().getTime();\n                        heartbeat();\n                        device = JSON.parse(pako.inflate(msg.payload, { to: 'string' }));\n                        mqttDevice = msg.mqttDevice;\n                        updateDmaReadings();\n                    }\n                    break;\n                case 'readDatabase':\n                    if (msg.userID == userID)\n                    {\n                    }\n                    break;\n                case 'renew':\n                    if (msg.userID == userID)\n                    {\n                        updateCookie(msg);\n                    }\n                    break;\n                case 'permissionError':\n                    if (msg.userID == userID)\n                    {\n                        acknowledgeDialog('Permission', 'Error', msg.payload);\n                    }\n                    break;\n                case 'loginExpired':\n                    if (msg.userID == userID)\n                    {\n                       location.reload();\n                    }\n                    break;\n                default:\n                    break;\n            }\n        }\n        function updateDmaReadings()\n        {\n            $('#linkQualityId').text(device.linkQuality.value);\n            $('#signalLevelId').text(device.signalLevel.value);\n            phasePlot();\n            modePlot();\n            bunchPlot();\n            dataGlobal();\n            $( \"#acknowledgeDialog\" ).dialog('close');\n        }\n        function dataGlobal()\n        {\n            $(\"#beamCurrent\").text(Math.round(device.beamCurrent.value * 100.0) / 100.0);\n        }\n        function phasePlot()\n        {\n            var normalCardStyle = '#575491';\n            var normalCardTitleStyle = '#fdc300';\n            var normalCardBodyStyle = '#9f9dc7';\n            var normalTraceColor = '#575491';\n            var alarmCardStyle = 'red';\n            var alarmCardTitleStyle = 'white';\n            var alarmCardBodyStyle = 'pink';\n            var alarmTraceColor = 'red';\n            \n            var cardStyle = normalCardStyle;\n            var cardTitleStyle = normalCardTitleStyle;\n            var cardBodyStyle = normalCardBodyStyle;\n            var traceColor = normalTraceColor;\n            if (device.beamCurrent.value > 50.0)\n            {\n                if (device.maxDipoleModeAmp.value > device.maxDipoleModeAmp.alarm.limits.high)\n                {\n                    cardStyle = alarmCardStyle;\n                    cardTitleStyle = alarmCardTitleStyle;\n                    cardBodyStyle = alarmCardBodyStyle;\n                    traceColor = alarmTraceColor;\n                }\n            }\n            $('#phaseCard').css('background-color',cardStyle);\n            $('#phaseCardBody').css('background-color',cardBodyStyle);\n            $('#phaseCardTitle').css('color',cardTitleStyle);\n            var ymax = device.maxDipoleModeAmp.alarm.limits.hihi;\n            var layout =\n            {   \n                title: 'Differential Phase',\n                showlegend: false,\n                xaxis: {title: 'Bunch Number'},\n                yaxis: {title: 'phase (deg)', range: [-ymax,ymax]}\n            };\n            var traceData = [{}];\n            var phase = device.difPhase.value;\n            traceData[0] = {x: [],y: [],name: 'phase', yaxis: 'y1',type: 'bar',marker: {color: traceColor}};\n            for (var ii = 0; ii < phase[0].length; ++ii)\n            {\n                traceData[0].x[ii] = phase[0][ii];\n                traceData[0].y[ii] = phase[1][ii];\n            }\n            Plotly.newPlot('phasePlot', traceData, layout);\n        }\n        function modePlot()\n        {\n            var normalCardStyle = '#575491';\n            var normalCardTitleStyle = '#fdc300';\n            var normalCardBodyStyle = '#9f9dc7';\n            var normalTraceColor = '#575491';\n            var alarmCardStyle = 'red';\n            var alarmCardTitleStyle = 'white';\n            var alarmCardBodyStyle = 'pink';\n            var alarmTraceColor = 'red';\n            \n            var cardStyle = normalCardStyle;\n            var cardTitleStyle = normalCardTitleStyle;\n            var cardBodyStyle = normalCardBodyStyle;\n            var traceColor = normalTraceColor;\n            if (device.beamCurrent.value > 50.0)\n            {\n                if (device.maxDipoleModeAmp.value > device.maxDipoleModeAmp.alarm.limits.high)\n                {\n                    cardStyle = alarmCardStyle;\n                    cardTitleStyle = alarmCardTitleStyle;\n                    cardBodyStyle = alarmCardBodyStyle;\n                    traceColor = alarmTraceColor;\n                }\n            }\n            $('#modeSpectrumCard').css('background-color',cardStyle);\n            $('#modeSpectrumCardBody').css('background-color',cardBodyStyle);\n            $('#modeSpectrumCardTitle').css('color',cardTitleStyle);\n            var ymax = device.maxDipoleModeAmp.alarm.limits.high;\n            var yscale = Math.floor(Math.log10(ymax)) + 1;\n            var layout =\n            {   \n                title: 'Mode Spectrum',\n                xaxis: {title: 'Mode Number'},\n                yaxis: {title: 'Amplitude (deg)', type: 'log', range: [-1,yscale]},\n                shapes: [{\n                            type: 'rect',\n                            xref: 'paper',\n                            x0: 0,\n                            x1: 1,\n                            yref: 'y',\n                            y0: ymax,\n                            y1: ymax + .1,\n                            line: { width: 0},\n                            fillcolor: 'red'\n                        }]\n            };\n            var modeM = device.modeM.value;\n            var traceData = [{}];\n            traceData[0] = {x: [],y: [],name: 'mode', yaxis: 'y1',type: 'bar',marker: {color: traceColor}};\n            for (var ii = 0; ii < modeM[0].length; ++ii)\n            {\n                traceData[0].x[ii] = modeM[0][ii];\n                traceData[0].y[ii] = modeM[1][ii];\n            }\n            Plotly.newPlot('modePlot', traceData, layout);\n        }\n        function bunchPlot()\n        {\n            var layout =\n            {   \n                title: 'Bunch Intensity',\n                showlegend: false,\n                xaxis: {title: 'Bunch Number'},\n                yaxis: {title: 'Bunch Current (mA)'},\n            };\n            var bunchCurrent = device.bunchCurrent.value;\n            var traceData = [{}];\n            traceData[0] = {x: [],y: [],name: 'bunch Intensity', yaxis: 'y1',type: 'bar',marker: {color: '#575491'}};\n            for (var ii = 0; ii < bunchCurrent[0].length; ++ii)\n            {\n                traceData[0].x[ii] = bunchCurrent[0][ii];\n                traceData[0].y[ii] = bunchCurrent[1][ii];\n            }\n            Plotly.newPlot('bunchPlot', traceData, layout);\n        }\n        \n",
        "output": "str",
        "x": 630,
        "y": 260,
        "wires": [
            [
                "2f9f8abf.a80656"
            ]
        ]
    },
    {
        "id": "c1034be9.37f0a8",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "javascript",
        "field": "payload.javascript",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "{{{payload.script.global}}}\n{{{payload.script.user}}}\n",
        "output": "str",
        "x": 620,
        "y": 340,
        "wires": [
            [
                "7fef0c19.4ed014"
            ]
        ]
    },
    {
        "id": "450b0136.7ccbd",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "body",
        "field": "payload.body",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "{{{payload.html.dashboard}}}\n    <div width=\"100%\">\n        <div class='row' style='padding-bottom: 25px;'>\n            <div class='col-md-12'>\n{{{payload.html.user}}}\n            </div>\n        </div>\n        <div class='row' style='padding-bottom: 25px;'>\n            <div class='col-md-12'>\n{{{payload.html.wifimon}}}\n            </div>\n        </div>\n    </div>",
        "output": "str",
        "x": 930,
        "y": 380,
        "wires": [
            [
                "2e95339f.b9da0c"
            ]
        ]
    },
    {
        "id": "b6fcc866.328488",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "html.wifimon",
        "field": "payload.html.wifimon",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!-- Dashboard HTML -->\n                <div class='card'>\n                    <p class='card-title'>WiFi Connection</p>\n                    <div class='card-body' align=\"center\">\n                        <div class='row'  style='padding-top: 0px;'>\n                            <table width='100%'>\n                                <tr>\n                                    <td width='60%' >\n                                        <span class='card-text' >Device Update</span>\n                                    </td>\n                                    <td width='20%' align='center'></td>\n                                    <td width='20%' align='center'>\n                                        <img src='/img/heartRed.png' id='heartBeatID' width='100px' height='100px'/>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width='60%' >\n                                        <span class='card-text' >Signal Level (dBm)</span>\n                                    </td>\n                                    <td width='20%' align='center'></td>\n                                    <td width='20%' align='center'>\n                                        <span class='card-text' id='signalLevelId' >-100</span>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width='60%' >\n                                        <span class='card-text' >Link Quality (/70)</span>\n                                    </td>\n                                    <td width='20%' align='center'></td>\n                                    <td width='20%' align='center'>\n                                        <span class='card-text' id='linkQualityId' >-1</span>\n                                    </td>\n                                </tr>\n                            </table>\n                        </div>\n                    </div>\n                </div>\n",
        "output": "str",
        "x": 950,
        "y": 340,
        "wires": [
            [
                "450b0136.7ccbd"
            ]
        ]
    },
    {
        "id": "7fef0c19.4ed014",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "html.dashboard",
        "field": "payload.html.dashboard",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "    <div width='100%' style='padding-bottom: 25px;'>\n        <div class='card'>\n            <table width='100%'>\n                <tr>\n                    <td width='60%' align=\"left\">\n                        <span class=\"card-title\">Beam current (mA)</span>\n                    </td>\n                    <td width='40%' align=\"right\">\n                        <span class=\"card-title\" id=\"beamCurrent\"></span>\n                    </td>\n                </tr>\n            </table>\n        </div>\n    </div>\n    <div style='padding-bottom: 25px;'>\n        <div class='card'  id='modeSpectrumCard'>\n            <p class=\"card-title\"  id='modeSpectrumCardTitle'>Mode Spectrum</p>\n            <div class='card-body' id='modeSpectrumCardBody'>\n                <div id=\"modePlot\"></div>\n            </div>\n        </div>\n    </div>\n    <div style='padding-bottom: 25px;'>\n        <div class='card' id='phaseCard'>\n            <p class='card-title' id='phaseCardTitle'>Differential Phase</p>\n            <div class='card-body' id='phaseCardBody'>\n                <div id=\"phasePlot\"></div>\n            </div>\n        </div>\n    </div>\n    <div style='padding-bottom: 25px;'>\n        <div class='card'>\n            <p class='card-title'>Bunch Intensity</p>\n            <div class='card-body'>\n                <div id=\"bunchPlot\"></div>\n            </div>\n        </div>\n    </div>\n",
        "output": "str",
        "x": 960,
        "y": 260,
        "wires": [
            [
                "28cd98f1.2a1518"
            ]
        ]
    },
    {
        "id": "6533b535.454c4c",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "navBarIcon",
        "field": "payload.navBarIcon",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "bucketYellow.png",
        "output": "str",
        "x": 270,
        "y": 300,
        "wires": [
            [
                "c76a9544.852e88"
            ]
        ]
    },
    {
        "id": "28cd98f1.2a1518",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "html.user",
        "field": "payload.html.user",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "                <div class='card' id='userCardId'>\n                    <div class='card-body' align=\"center\">\n                        <table width=\"100%\">\n                            <tr>\n                                <td  align=\"left\">\n                                     <span class='card-text' style='color:black;'>User:</span>\n                                </td>\n                                <td  align=\"right\">\n                                     <span class='card-text' id='usernameId'></span>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td  align=\"left\">\n                                    <span class='card-text' style='color:black;'>Time left:</span>\n                                </td>\n                                <td  align=\"right\">\n                                     <span class='card-text' id='expTimeId'></span>\n                                </td>\n                            </tr>\n                        </table>\n                        <table width=\"100%\">\n                            <tr>\n                                <td width=\"40%\">\n                                    <button class='btn btn-block card-button big-text' id='logoutButton' onclick=\"renew()\" >Renew</button>\n                                </td>\n                                <td width=\"10%\"></td>\n                                <td width=\"40%\">\n                                    <button class='btn btn-block card-button big-text' id='logoutButton' onclick=\"logout()\" >Logout</button>\n                                </td>\n                            </tr>\n                        </table>\n                    </div>\n                </div>\n",
        "output": "str",
        "x": 940,
        "y": 300,
        "wires": [
            [
                "b6fcc866.328488"
            ]
        ]
    },
    {
        "id": "2f9f8abf.a80656",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "script.user",
        "field": "payload.script.user",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "        function getCreds()\n        {\n            var now = new Date().getTime();\n            var expDate = Number(getCookie('ExpDate'));\n            if (expDate > 0)\n            {\n                expDate = expDate - now;\n                if(expDate < 0)\n                {\n                    logout();\n                }\n                else\n                {\n                    var hours = Math.floor(expDate / 3600000);\n                    var minutes = expDate - hours * 3600000;\n                    minutes = Math.floor(minutes / 60000);\n                    var seconds = expDate - (hours * 3600000) - (minutes * 60000);\n                    seconds = Math.floor(seconds / 1000);\n                    hours = hours.toString();\n                    if (hours.length == 1) hours = '0' + hours; \n                    minutes = minutes.toString();\n                    if (minutes.length == 1) minutes = '0' + minutes; \n                    seconds = seconds.toString();\n                    if (seconds.length == 1) seconds = '0' + seconds; \n                    var timeString = hours + ':' + minutes + ':' + seconds;\n                    $('#usernameId').text(getCookie('Username'));\n                    $('#expTimeId').text(timeString);\n                }\n            }\n            else\n            {\n                $('#usernameId').text(getCookie('Username'));\n                $('#expTimeId').text('Forever');\n            }\n        }\n        function logout()\n        {\n            document.cookie = project + \"Role= ; expires = Thu, 01 Jan 1970 00:00:00 GMT\";\n            document.cookie = project + \"ExpDate= ; expires = Thu, 01 Jan 1970 00:00:00 GMT\";\n            document.cookie = project + \"Username= ; expires = Thu, 01 Jan 1970 00:00:00 GMT\";\n            window.location.href = \"/\";\n        }\n        function renew()\n        {\n            var actionMsg = {};\n            sendActionMsg('renew', 'renew', actionMsg);\n        }\n        function updateCookie(msg)\n        {\n            document.cookie = project + \"Role=\" + msg.role;\n            document.cookie = project + \"ExpDate=\" + msg.expDate;\n            document.cookie = project + \"Username=\" + msg.username;\n        }\n        function downloadToken()\n        {\n            downloadString(getCookie(\"Role\"), \"text/plain\", project + \"-token.txt\");\n        }\n// from https://gist.github.com/danallison/3ec9d5314788b337b682\n        function downloadString(text, fileType, fileName) \n        {\n            var blob = new Blob([text], { type: fileType });\n            \n            var a = document.createElement('a');\n            a.download = fileName;\n            a.href = URL.createObjectURL(blob);\n            a.dataset.downloadurl = [fileType, a.download, a.href].join(':');\n            a.style.display = \"none\";\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            setTimeout(function() { URL.revokeObjectURL(a.href); }, 1500);\n        }",
        "output": "str",
        "x": 630,
        "y": 300,
        "wires": [
            [
                "c1034be9.37f0a8"
            ]
        ]
    },
    {
        "id": "c634a8d3.297848",
        "type": "http in",
        "z": "c4285970.3276d8",
        "name": "/",
        "url": "/",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 90,
        "y": 120,
        "wires": [
            [
                "ca68de71.c19fe"
            ]
        ]
    },
    {
        "id": "65a7590b.59a2a8",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "Body",
        "field": "payload.body",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!-- Body HTML -->\n",
        "output": "str",
        "x": 830,
        "y": 120,
        "wires": [
            [
                "a64bb02e.9692a"
            ]
        ]
    },
    {
        "id": "9709fa69.9daac8",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "Title",
        "field": "payload.title",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "Oscillation Overthruster",
        "output": "str",
        "x": 550,
        "y": 120,
        "wires": [
            [
                "a36869fc.6f5e58"
            ]
        ]
    },
    {
        "id": "ca68de71.c19fe",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "JavaScript",
        "field": "payload.javascript",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "        useWebSockets(false);\n        function onDocumentReady()\n        {\n            window.location = '/apps'\n        }\n        function onWebSocketOpen()\n        {\n        }\n        function onWebSocketClose()\n        {\n            \n        }\n        function onWebSocketMessage(msg)\n        {\n        }\n\n",
        "output": "str",
        "x": 410,
        "y": 120,
        "wires": [
            [
                "9709fa69.9daac8"
            ]
        ]
    },
    {
        "id": "a36869fc.6f5e58",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "navBarIcon",
        "field": "payload.navBarIcon",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "yellowSpaceShip.png",
        "output": "str",
        "x": 690,
        "y": 120,
        "wires": [
            [
                "65a7590b.59a2a8"
            ]
        ]
    },
    {
        "id": "6c8ad237.33ae7c",
        "type": "inject",
        "z": "eaa5749e.352818",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 860,
        "y": 60,
        "wires": [
            [
                "6d4f56e0.04a238"
            ]
        ]
    },
    {
        "id": "6d4f56e0.04a238",
        "type": "exec",
        "z": "eaa5749e.352818",
        "command": "iwconfig wlan0 | grep ESSID",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 860,
        "y": 120,
        "wires": [
            [
                "c6d2055.718baf8"
            ],
            [],
            []
        ]
    },
    {
        "id": "c6d2055.718baf8",
        "type": "function",
        "z": "eaa5749e.352818",
        "name": "Get SSID",
        "func": "var ssid = msg.payload.substring(msg.payload.indexOf(\"ESSID\") + 6).split('\\n')[0];\nreturn {topic:msg.topic, payload:{topic:msg.topic ,payload:ssid, userID: msg.userID }};\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1060,
        "y": 100,
        "wires": [
            [
                "9bc013a4.b46c"
            ]
        ]
    },
    {
        "id": "1e80ca53.767a96",
        "type": "http in",
        "z": "eaa5749e.352818",
        "name": "/setup",
        "url": "/setup",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 480,
        "wires": [
            [
                "930a7a63.11bf58"
            ]
        ]
    },
    {
        "id": "e1192fe0.96315",
        "type": "template",
        "z": "eaa5749e.352818",
        "name": "Set Title",
        "field": "payload.title",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "Wireless Setup",
        "output": "str",
        "x": 260,
        "y": 520,
        "wires": [
            [
                "fc3a3f22.7533"
            ]
        ]
    },
    {
        "id": "fc3a3f22.7533",
        "type": "template",
        "z": "eaa5749e.352818",
        "name": "script.global",
        "field": "payload.script.global",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "// Global Javascript\n        var appStarted = false;\n        var networkList = null;\n        var selectedNetwork = -1;\n        useWebSockets(true);\n        function onDocumentReady()\n        {\n            setRemoteApp(false);\n            $('#pwDialog').hide();\n        }\n        function onWebSocketOpen()\n        {\n            if (!appStarted)\n            {\n                sendActionMsg('getConnection', 'getConnection', {});\n                appStarted = true;\n            }\n        }\n        function onWebSocketClose()\n        {\n            wsConnectC();\n        }\n        function onWebSocketMessage(msg)\n        {\n            switch(msg.topic)\n            {\n                case 'getConnection':\n                    $('#connectedSSID').text(msg.payload);\n                    sendActionMsg('getNetworks', 'getNetworks', {});\n                    break;\n                case 'connectToNetwork':\n                    sendActionMsg('getConnection', 'getConnection', {});\n                    $('#ssid').attr('disabled',false);\n                    $('#ssidkey').attr('disabled',false);\n                    $('#ssidButton').attr('disabled',false);\n                    break;\n                default:\n                // code block\n            }\n        }\n        function setSsid()\n        {\n            var ssid = $('#ssid').val();\n            var ssidkey = $('#ssidkey').val();\n            sendActionMsg('connectToNetwork', 'connectToNetwork', {ssid:ssid, key:ssidkey});\n            $('#connectedSSID').text('');\n            $('#ssid').val('');\n            $('#ssid').attr('disabled',true);\n            $('#ssidkey').val('');\n            $('#ssidkey').attr('disabled',true);\n            $('#ssidButton').attr('disabled',true);\n            \n        }\n",
        "output": "str",
        "x": 550,
        "y": 480,
        "wires": [
            [
                "380c1491.22fa9c"
            ]
        ]
    },
    {
        "id": "380c1491.22fa9c",
        "type": "template",
        "z": "eaa5749e.352818",
        "name": "javascript",
        "field": "payload.javascript",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "{{{payload.script.global}}}\n",
        "output": "str",
        "x": 540,
        "y": 520,
        "wires": [
            [
                "4e6c8908.0524c8"
            ]
        ]
    },
    {
        "id": "41d7170c.80e638",
        "type": "template",
        "z": "eaa5749e.352818",
        "name": "body",
        "field": "payload.body",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "    <div width=\"100%\">\n        <div class='row' style='padding-bottom: 10px;'>\n            <div class='col-md-12' align='center'>\n{{{payload.html.wirelessSetup}}}\n            </div>\n        </div>\n    </div>\n",
        "output": "str",
        "x": 790,
        "y": 520,
        "wires": [
            [
                "28f9a36b.9e7a3c"
            ]
        ]
    },
    {
        "id": "930a7a63.11bf58",
        "type": "template",
        "z": "eaa5749e.352818",
        "name": "navBarIcon",
        "field": "payload.navBarIcon",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "basicYellow.png",
        "output": "str",
        "x": 270,
        "y": 480,
        "wires": [
            [
                "e1192fe0.96315"
            ]
        ]
    },
    {
        "id": "4e6c8908.0524c8",
        "type": "template",
        "z": "eaa5749e.352818",
        "name": "html.wirelessSetup",
        "field": "payload.html.wirelessSetup",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "                <div class='card'>\n                    <div class='row'>\n                        <div class='col-md-2'>\n                        </div>\n                        <div class='col-md-8'>\n                            <p class='card-title'>Network Connection</p>\n                         </div>\n                        <div class='col-md-2'>\n                        </div>\n                    </div>\n                    <div class='card-body' align=\"center\">\n                        <div class='row' style='padding-bottom: 10px;'>\n                            <div class='col-md-6'>\n                                <span  class='card-text' >Connected to:</span>\n                            </div>\n                            <div class='col-md-6'>\n                                 <span  class='card-text' id='connectedSSID'>off/any</span>\n                            </div>\n                        </div>\n                        <div class='row' style='padding-bottom: 10px;'>\n                            <div class='col-md-4'>\n                                <span class=\"tableText\">SSID</span>\n                            </div>\n                            <div class='col-md-8'>\n                                <input class=\"form-control tableText\" id=\"ssid\" type=\"text\" value=\"\" />\n                             </div>\n                        </div>\n                        <div class='row' style='padding-bottom: 10px;'>\n                            <div class='col-md-4'>\n                                <span class=\"tableText\">KEY</span>\n                            </div>\n                            <div class='col-md-8'>\n                                <input class=\"form-control tableText\" id=\"ssidkey\" type=\"text\" value=\"\" />\n                             </div>\n                        </div>\n                        <div class='row' style='padding-bottom: 10px;'>\n                            <div class='col-md-4'>\n                            </div>\n                            <div class='col-md-6'>\n                                <button class='btn btn-block card-button big-text' id=\"ssidButton\" onclick=\"setSsid()\" >Connect & Reboot</button>\n                             </div>\n                            <div class='col-md-2'>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n",
        "output": "str",
        "x": 830,
        "y": 480,
        "wires": [
            [
                "41d7170c.80e638"
            ]
        ]
    },
    {
        "id": "ab64b0d5.c3fee",
        "type": "websocket in",
        "z": "eaa5749e.352818",
        "name": "/setup/websocket",
        "server": "c427a7cd.35f1f8",
        "client": "",
        "x": 160,
        "y": 100,
        "wires": [
            [
                "dbec0823.672678"
            ]
        ]
    },
    {
        "id": "9bc013a4.b46c",
        "type": "websocket out",
        "z": "eaa5749e.352818",
        "name": "/setup/websocket",
        "server": "c427a7cd.35f1f8",
        "client": "",
        "x": 1250,
        "y": 160,
        "wires": []
    },
    {
        "id": "dbec0823.672678",
        "type": "json",
        "z": "eaa5749e.352818",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 310,
        "y": 100,
        "wires": [
            [
                "bb0701eb.a4b29"
            ]
        ]
    },
    {
        "id": "5ead619d.4bfff",
        "type": "switch",
        "z": "eaa5749e.352818",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "getNetworks",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "getConnection",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "connectToNetwork",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 630,
        "y": 100,
        "wires": [
            [],
            [
                "6d4f56e0.04a238"
            ],
            [
                "71a17106.a018d"
            ]
        ]
    },
    {
        "id": "bb0701eb.a4b29",
        "type": "function",
        "z": "eaa5749e.352818",
        "name": "set userId and topic",
        "func": "return {\n    topic   : msg.payload.topic, \n    userID  : msg.payload.userID,\n    payload : msg.payload.payload};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 470,
        "y": 100,
        "wires": [
            [
                "5ead619d.4bfff"
            ]
        ]
    },
    {
        "id": "71a17106.a018d",
        "type": "function",
        "z": "eaa5749e.352818",
        "name": "Prepare WPA",
        "func": "var fileContents = 'ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev\\nupdate_config=1\\ncountry=SE\\n';\nfileContents = fileContents + 'network={\\n   ssid=\"' + msg.payload.ssid + '\"\\n   psk=\"' + msg.payload.key + '\"\\n}\\n'\nreturn {topic:msg.topic, payload:fileContents};",
        "outputs": 1,
        "noerr": 0,
        "x": 780,
        "y": 180,
        "wires": [
            [
                "3ef93a0f.951976"
            ]
        ]
    },
    {
        "id": "3ef93a0f.951976",
        "type": "file",
        "z": "eaa5749e.352818",
        "name": "Write to ssid.conf",
        "filename": "/home/pi/ssid.conf",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 970,
        "y": 180,
        "wires": [
            [
                "4c1194c8.db057c"
            ]
        ]
    },
    {
        "id": "4c1194c8.db057c",
        "type": "exec",
        "z": "eaa5749e.352818",
        "command": "sudo mv /home/pi/ssid.conf /etc/wpa_supplicant/wpa_supplicant.conf",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "mv ssid to wpa",
        "x": 780,
        "y": 240,
        "wires": [
            [
                "1acb5f15.919f11"
            ],
            [],
            []
        ]
    },
    {
        "id": "1acb5f15.919f11",
        "type": "delay",
        "z": "eaa5749e.352818",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 940,
        "y": 240,
        "wires": [
            [
                "20f7c462.3d395c"
            ]
        ]
    },
    {
        "id": "20f7c462.3d395c",
        "type": "exec",
        "z": "eaa5749e.352818",
        "command": "sudo wpa_cli -i wlan0 reconfigure",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "wlan0 reconfigure",
        "x": 1110,
        "y": 240,
        "wires": [
            [
                "c80f01f0.2fe93"
            ],
            [],
            []
        ]
    },
    {
        "id": "c80f01f0.2fe93",
        "type": "delay",
        "z": "eaa5749e.352818",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 780,
        "y": 320,
        "wires": [
            [
                "fa9ce40f.c3e948"
            ]
        ]
    },
    {
        "id": "fa9ce40f.c3e948",
        "type": "exec",
        "z": "eaa5749e.352818",
        "command": "sudo reboot",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 950,
        "y": 320,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "c104210d.418eb",
        "type": "template",
        "z": "2c5d25cb.3428ca",
        "name": "navBar",
        "field": "payload.navBar",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!-- navBar -->\n    <div class=\"jumbotron\" width=\"100%\">\n        <table width=\"100%\">\n            <tr>\n                <td style=\"text-align:left; vertical-align:middle;\"  width=\"20%\">\n                    <a href='https://www.maxiv.lu.se/' target='_blank'>\n                        <img src=\"/img/MAX-IVYellow.png\" height=\"75px\"/>\n                    </a>                \n                </td>\n                <td width=\"60%\" style=\"text-align:center; vertical-align:middle;\">\n                    <h1 class=\"jumbotron-title big-text bold-text\">\n                        <img src=\"/img/{{{payload.navBarIcon}}}\" height=\"75px\" style=\"padding-right:20px;\"/><span>{{{payload.title}}}</span>\n                    </h1>\n                </td>\n                <td style=\"text-align:right; vertical-align:middle;\" width=\"20%\">\n                    <a href='/apps'><img src=\"/img/appsYellow.png\" height=\"75px\"/></a>\n                </td>\n            </tr>\n        </table>\n    </div>",
        "output": "str",
        "x": 200,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "b9df3f26.ab53f",
        "type": "template",
        "z": "ca529822.9112f8",
        "name": "HTML",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n{{{payload.head}}}\n  </head>\n  <body>\n{{{payload.navBar}}}\n{{{payload.html.websocket}}}\n{{{payload.body}}}\n{{{payload.foot}}}\n  </body>\n</html>",
        "output": "str",
        "x": 1150,
        "y": 40,
        "wires": [
            [
                "d1d9e12b.926ff"
            ]
        ]
    },
    {
        "id": "895ba39c.86e59",
        "type": "template",
        "z": "ca529822.9112f8",
        "name": "Foot",
        "field": "payload.foot",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "    <div id=\"acknowledgeDialog\" title=\"Acknowledge\" class='card'>\n        <p class='card-title' id='acknowledgeDialogTitle'>Warning</p>\n        <div class='card-body'>\n            <p class='tableText' id='acknowledgeDialogText'>Text</p>\n        </div>\n    </div>\n    <div id=\"optionDialog\" title=\"Option\" class='card'>\n        <p class='card-title' id='optionDialogTitle'>Choice</p>\n        <div class='card-body'>\n            <p class='tableText' id='optionDialogText'>Text</p>\n        </div>\n    </div>\n    <div id=\"messageDialog\" title=\"Message\" class='card'>\n        <p class='card-title' id='messageDialogTitle'>Warning</p>\n        <div class='card-body'>\n            <p class='tableText' id='messageDialogText'>Text</p>\n        </div>\n    </div>\n    <script src=\"/scripts/popper.js\"></script>\n    <script src=\"/scripts/bootstrap.js\"></script>",
        "output": "str",
        "x": 690,
        "y": 40,
        "wires": [
            [
                "a9a62959.7c01e8"
            ]
        ]
    },
    {
        "id": "aa17ff35.7cdfd",
        "type": "template",
        "z": "ca529822.9112f8",
        "name": "Head",
        "field": "payload.head",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "    <meta charset=\"UTF-8\">\n    <link rel=\"icon\" href=\"/img/favicon.ico?v=4\" type=\"image/x-icon\"/>\n    <title>{{payload.title}}</title>\n    <link rel=\"stylesheet\" href=\"/css/bootstrap.css\"/>\n    <link rel=\"stylesheet\" href=\"/jquery/jquery-ui.css\"/>\n    <link rel=\"stylesheet\" href=\"/jquery/jquery-ui-timepicker-addon.css\"/>\n    <script src=\"/jquery/jquery.js\"></script>\n    <script src=\"/jquery/jquery-ui.js\"></script>\n    <script src=\"/jquery/jquery-ui-timepicker-addon.js\"></script>\n    <script src=\"/scripts/plotly-latest.min.js\"></script>\n    <script src=\"/scripts/pako.min.js\"></script>\n{{{payload.extraScripts}}}\n    <style>\n{{{payload.css}}}\n    </style>\n    <style>\n{{{payload.extraCss}}}\n    </style>\n    <script>\n{{{payload.utilityScripts}}}\n    </script>\n    <script>\n{{{payload.javascript}}}\n    </script>",
        "output": "str",
        "x": 570,
        "y": 40,
        "wires": [
            [
                "895ba39c.86e59"
            ]
        ]
    },
    {
        "id": "d1d9e12b.926ff",
        "type": "http response",
        "z": "ca529822.9112f8",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1270,
        "y": 40,
        "wires": []
    },
    {
        "id": "c4ed2505.8c07e8",
        "type": "template",
        "z": "ca529822.9112f8",
        "name": "Utility Scripts",
        "field": "payload.utilityScripts",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "        var remoteApp = true;\n        var ws;\n        var userID = -1;\n        var useWebSocketsFlag = true;\n        var project = '{{{payload.project}}}';\n        var heartBeatImage = false;\n        var wsUri = '';\n        var wsConnected = false;\n\n        function setRemoteApp(remoteAppSet)\n        {\n            remoteApp  = remoteAppSet;\n        }\n        function webSocketConnected()\n        {\n            return wsConnected;\n        }\n        function useWebSockets(webSocketsFlag)\n        {\n            useWebSocketsFlag = webSocketsFlag;\n        }\n        function wsConnectC()\n        {\n            if (!useWebSocketsFlag)\n            {\n                return;\n            }\n            if (wsUri.length < 1)\n            {\n                var uri = window.location.href.split('://');\n                var wslead = 'ws://';\n                if (uri[0] == 'https') wslead = 'wss://';\n                var questionLocation = uri[1].indexOf('?');\n                if (questionLocation >= 0)\n                {\n                    uri[1] = uri[1].substring(0,questionLocation);\n//                    console.log(uri[1]);\n                }\n                if (uri[1].indexOf('/') < (uri[1].length - 1))\n                {\n                    wsUri = wslead + uri[1] + '/websocket';\n                }\n                else\n                {\n                    wsUri = wslead + uri[1] + 'websocket';\n                }\n            }\n            ws = new WebSocket(wsUri);\n            ws.onmessage = function(event)\n            {\n                onWebSocketMessage(JSON.parse(event.data));\n        \n            };\n            ws.onopen = function()\n            {\n                console.log(\"Websocket connected\");\n                wsConnected = true;\n                $('#webSocketStatus').html('Open');\n                $('#reOpenWebSocketButton').hide();\n                $('#webSocketStatusRow').css('padding-bottom','0px');\n                $('#webSocketStatusCard').hide();\n                onWebSocketOpen();\n            };\n            ws.onclose = function()\n            {\n                console.log(\"Websocket closed\");\n                wsConnected = false;\n                $('#webSocketStatus').html('Closed');\n                $('#reOpenWebSocketButton').show();\n                $('#webSocketStatusCard').show();\n                $('#webSocketStatusRow').css('padding-bottom','25px');\n                onWebSocketClose();\n                wsConnectC();\n            };\n        }\n\n        function getRandomInt(max)\n        {\n          return Math.floor(Math.random() * Math.floor(max));\n        }\n        $( document ).ready(function()\n        {\n            userID  = {{{payload.userID}}};\n            if (!useWebSocketsFlag)\n            {\n                $('#webSocketStatusRow').css('padding-bottom','0px');\n                $('#webSocketStatusCard').hide();\n            }\n            wsConnectC();\n            onDocumentReady();\n       });\n        $( function() \n        {\n            $( \"#acknowledgeDialog\" ).dialog(\n                {\n                    width:    500,\n                    autoOpen: false,\n                    buttons:\n                    [\n                        {\n                            text: \"Ok\",\n                            click: function() { $( this ).dialog( \"close\" );},\n                            showText: false\n                        },\n                   ]\n                });\n            $( \"#messageDialog\" ).dialog(\n                {\n                    width:    500,\n                    autoOpen: false,\n                    buttons:[]\n                });\n        } );\n        function optionDialog(headerText, title, text, buttonTexts, buttonFunctions)\n        {\n            var buttonDefinitions = [];\n            for (var ii = 0; ii < buttonTexts.length; ++ii)\n            {\n                buttonDefinitions[ii] = \n                    {\n                        text: buttonTexts[ii],\n                        click: buttonFunctions[ii],\n                        showText: false\n                    };\n            }\n            $( \"#optionDialog\" ).dialog( \"option\", \"title\", headerText );   \n            $( \"#optionDialog\" ).dialog( \"option\", \"buttons\", buttonDefinitions);\n            $( \"#optionDialogTitle\" ).html(title);\n            $( \"#optionDialogText\" ).html(text);\n            $( \"#optionDialog\" ).dialog( \"open\" );\n        }\n        $( function() \n        {\n            $( \"#optionDialog\" ).dialog(\n                {\n                    width:    500,\n                    autoOpen: false,\n                    buttons:\n                    [\n                        {\n                            text: \"Ok\",\n                            click: function() {$( this ).dialog( \"close\" );},\n                            showText: false\n                        },\n                        {\n                            text: \"Cancel\",\n                            click: function() {$( this ).dialog( \"close\" );},\n                            showText: false\n                        },\n                   ]\n                });\n        } );\n        function acknowledgeDialog(headerText, title, text)\n        {\n            $( \"#acknowledgeDialog\" ).dialog( \"option\", \"title\", headerText );    \n            $( \"#acknowledgeDialogTitle\" ).html(title);\n            $( \"#acknowledgeDialogText\" ).html(text);\n            $( \"#acknowledgeDialog\" ).dialog( \"open\" );\n        }\n        function messageDialog(headerText, title, text)\n        {\n            $( \"#messageDialog\" ).dialog( \"option\", \"title\", headerText );    \n            $( \"#messageDialogTitle\" ).html(title);\n            $( \"#messageDialogText\" ).html(text);\n            $( \"#messageDialog\" ).dialog( \"open\" );\n        }\n        function heartbeat()\n        {\n            heartBeatImage = !heartBeatImage;\n            var heartBeatImageSrc = '/img/heartRed.png';\n            if (heartBeatImage) heartBeatImageSrc = '/img/heartPink.png';\n            $('#heartBeatID').attr('src',heartBeatImageSrc);\n        }\n        function getCookie(extension)\n        {\n            var cookies = document.cookie.split(';');\n            var token = null;\n            var cookieName = project + extension + \"=\";\n            for (var icookie = 0; icookie < cookies.length; ++icookie)\n            {\n                var index = cookies[icookie].indexOf(cookieName);\n                if (index >= 0)\n                {\n                    token = cookies[icookie].substring(index + cookieName.length);\n                }\n            }\n            return token;\n        }\n        function sendActionMsg(topic,role,actionMsg)\n        {\n            var roleToken = \"\";\n            if (remoteApp) roleToken  = getCookie('Role');\n            if (roleToken == null)\n            {\n                location.reload();\n                return;\n            }\n            var webSocketMsg = \n            {\n                topic     : topic,\n                payload   : actionMsg,\n                userID    : userID,\n                token     : getCookie('Role'),\n                role      : role\n            };\n            ws.send(JSON.stringify(webSocketMsg));\n        }\n",
        "output": "str",
        "x": 430,
        "y": 40,
        "wires": [
            [
                "aa17ff35.7cdfd"
            ]
        ]
    },
    {
        "id": "99bb1519.85fc18",
        "type": "function",
        "z": "ca529822.9112f8",
        "name": "Get project name and userID",
        "func": "function getRandomInt(max)\n{\n  return Math.floor(Math.random() * Math.floor(max));\n}\nmsg.payload['project'] = global.get('project')\nmsg.payload['userID'] = getRandomInt(32768);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 220,
        "y": 40,
        "wires": [
            [
                "c4ed2505.8c07e8"
            ]
        ]
    },
    {
        "id": "a9a62959.7c01e8",
        "type": "template",
        "z": "ca529822.9112f8",
        "name": "html.websocket",
        "field": "payload.html.websocket",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!-- websocket status HTML -->\n    <div width=\"100%\">\n        <div class='row' id='webSocketStatusRow' style='padding-bottom: 0px;'>\n            <div class='col-md-12' align='center'>\n\n                <div class='card' id='webSocketStatusCard' >\n                    <p class='card-title'>Web Socket Status</p>\n                    <div class='card-body' align=\"center\">\n                        <div class='row'  style='padding-top: 0px;'>\n                            <table width='100%'>\n                                <tr>\n                                    <td width='60%' >\n                                        <span class='card-text' >Websocket Status</span>\n                                    </td>\n                                    <td width='20%' align='center'>\n                                        <button class='btn card-button btn-block big-text' id='reOpenWebSocketButton' onclick=\"wsConnectC()\">Re-open</button>\n                                    </td>\n                                    <td width='20%' align='center'>\n                                        <span class='card-text' id='webSocketStatus' >Closed</span>\n                                   </td>\n                                </tr>\n                            </table>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n",
        "output": "str",
        "x": 840,
        "y": 40,
        "wires": [
            [
                "35ffcf83.1547"
            ]
        ]
    },
    {
        "id": "35ffcf83.1547",
        "type": "function",
        "z": "ca529822.9112f8",
        "name": "IP filter",
        "func": "var ipfilter = [\n    \"127.0.0.16\"];\nvar ipAddress = ( msg.req.headers['x-forwarded-for'] || '').split(',').pop() || \n          msg.req.connection.remoteAddress || \n          msg.req.socket.remoteAddress || \n          msg.req.connection.socket.remoteAddress;\nif (ipAddress==undefined) return null;\nvar ipAddressSplit = ipAddress.split(\".\");\nfor (var ii =  0; ii < ipfilter.length; ++ii)\n{\n    var ipfilterSplit = ipfilter[ii].split(\".\");\n    if (ipAddress == ipfilter[ii])\n    { \n        return null;\n    }\n    if (ipfilterSplit[2] == '*')\n    {\n        if ((ipfilterSplit[0] == ipAddressSplit[0]) && (ipfilterSplit[1] == ipAddressSplit[1]))\n        {\n            return null;\n        }\n    }\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 990,
        "y": 40,
        "wires": [
            [
                "b9df3f26.ab53f"
            ]
        ]
    },
    {
        "id": "f5a9eda8.5c5bc",
        "type": "template",
        "z": "e3c68b88.d82258",
        "name": "CSS",
        "field": "payload.css",
        "fieldType": "msg",
        "format": "css",
        "syntax": "mustache",
        "template": "        :root \n        {\n          --color1: #434170;\n          --color2: #575491;\n          --color3: #9f9dc7;\n          --color4: #c6c2bb;\n          --color5: #fdc300;\n          --big-text-size :300%;\n          --bold-text :900;\n          --vert-pad : 25px;\n          --horz-pad : 25px;\n        }\n        body \n        {\n          background-color: white !important;\n          padding-left:25px;\n          padding-right:25px;\n        }\n        \n        img \n        {\n          object-fit: contain;\n        }\n        a\n        {\n            color: white;\n        }\n        a:visited \n        { \n            color: var(--white);\n        }\n        a:hover \n        { \n            color: var(--color5);\n        }\n\n        .jumbotron \n        {\n          background-color: var(--color2) !important;\n          color: white;\n          padding-top:25px;\n          padding-bottom:25px;\n        }\n        .jumbotron-title\n        {\n          color:var(--color5);\n        }\n        .jumbotron-button\n        {\n          color: white;\n          background-color: var(--color1);\n       }\n        .card\n        {\n          background-color: var(--color2) ;\n          text-align: center;\n        }\n        .card-body\n        {\n          background-color: var(--color3);;\n        }\n        .card-button\n        {\n          color: var(--color5) !important;\n          background-color: var(--color1) !important;\n          font-weight: bold;\n        }\n        .card-title\n        {\n          color: var(--color5);\n          font-weight: var(--bold-text);\n          font-size: var(--big-text-size);\n         }\n        .card-text\n        {\n          color: white;\n          text-align: left;\n          font-size: var(--big-text-size);\n        }\n        .danger-card\n        {\n          background-color: yellow !important;\n          text-align: center;\n        }\n        .danger-card-body\n        {\n          background-color: yellow;\n        }\n        .danger-card-button\n        {\n          color: yellow !important;\n          background-color: red !important;\n          font-weight: bold;\n        }\n        .danger-card-title\n        {\n          color: red;\n          font-weight: var(--bold-text);\n          font-size: var(--big-text-size);\n         }\n        .danger-card-text\n        {\n          color: white;\n          text-align: left;\n          font-size: var(--big-text-size);\n        }\n        .tableHeading\n        {\n          color:var(--container-title-color);\n        }\n        .tableText\n        {\n          color:var(--container-text-color);\n          font-size: var(--big-text-size);\n        }\n       .vert-pad\n        {\n            padding-top:var(--vert-pad);;\n            padding-bottom:var(--vert-pad);;\n        }\n        .horz-pad\n        {\n            padding-left:var(--horz-pad);;\n            padding-right:var(--horz-pad);;\n        }\n        .big-text\n        {\n            font-size: var(--big-text-size);\n        }\n        .bold-text\n        {\n            font-weight: var(--bold-text);\n        }\n       .ui-dialog-titlebar-close \n        {\n            visibility: hidden;\n        }\n        input.inputLarger \n        { \n            transform: scale(3); \n            margin: 1px;\n        }\n",
        "output": "str",
        "x": 190,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "966e270e.701e48",
        "type": "subflow:e3c68b88.d82258",
        "z": "8341090a.df9758",
        "x": 200,
        "y": 80,
        "wires": [
            [
                "899d0666.97b868"
            ]
        ]
    },
    {
        "id": "9460eaf0.da7628",
        "type": "subflow:ca529822.9112f8",
        "z": "8341090a.df9758",
        "name": "",
        "x": 620,
        "y": 80,
        "wires": []
    },
    {
        "id": "899d0666.97b868",
        "type": "subflow:2c5d25cb.3428ca",
        "z": "8341090a.df9758",
        "x": 420,
        "y": 80,
        "wires": [
            [
                "9460eaf0.da7628"
            ]
        ]
    },
    {
        "id": "c6d4dfc7.827cb",
        "type": "subflow:8341090a.df9758",
        "z": "c4285970.3276d8",
        "name": "",
        "x": 1010,
        "y": 180,
        "wires": []
    },
    {
        "id": "28f9a36b.9e7a3c",
        "type": "subflow:8341090a.df9758",
        "z": "eaa5749e.352818",
        "name": "",
        "x": 1070,
        "y": 520,
        "wires": []
    },
    {
        "id": "a64bb02e.9692a",
        "type": "subflow:8341090a.df9758",
        "z": "c4285970.3276d8",
        "name": "",
        "x": 1010,
        "y": 120,
        "wires": []
    },
    {
        "id": "2e95339f.b9da0c",
        "type": "subflow:8341090a.df9758",
        "z": "c4285970.3276d8",
        "name": "",
        "x": 1150,
        "y": 380,
        "wires": []
    },
    {
        "id": "c0939e4a.6386f",
        "type": "exec",
        "z": "5f562f66.a301e",
        "command": "pm2 restart red",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Restart",
        "x": 1140,
        "y": 200,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "9e290594.69c548",
        "type": "switch",
        "z": "5f562f66.a301e",
        "name": "Reset Tray",
        "property": "payload.reset.value",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 950,
        "y": 220,
        "wires": [
            [
                "c0939e4a.6386f"
            ],
            [
                "236a8168.66f7fe"
            ]
        ]
    },
    {
        "id": "236a8168.66f7fe",
        "type": "exec",
        "z": "5f562f66.a301e",
        "command": "sudo reboot",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Reboot",
        "x": 1140,
        "y": 260,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "557e4f40.b904e",
        "type": "delay",
        "z": "5f562f66.a301e",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 940,
        "y": 180,
        "wires": [
            [
                "9e290594.69c548"
            ]
        ]
    },
    {
        "id": "c87aa87d.aef928",
        "type": "inject",
        "z": "c4285970.3276d8",
        "name": "deviceA",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "deviceA",
        "payload": "MQTTDEVICEA",
        "payloadType": "env",
        "x": 120,
        "y": 40,
        "wires": [
            [
                "fdfbcac7.35b388"
            ]
        ]
    },
    {
        "id": "fdfbcac7.35b388",
        "type": "function",
        "z": "c4285970.3276d8",
        "name": "Init device name",
        "func": "var mqttSplit = msg.payload.split('/');\nvar deviceProps = {\n    project     :   mqttSplit[0],\n    deviceType  :   mqttSplit[1],\n    name        :   mqttSplit[2],\n};\nflow.set(msg.topic + 'Props',deviceProps);\nreturn null;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 280,
        "y": 40,
        "wires": []
    },
    {
        "id": "af9642ae.0c0da",
        "type": "function",
        "z": "c4285970.3276d8",
        "name": "Device Names",
        "func": "msg.payload['deviceAName'] = flow.get('deviceAProps').name;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 240,
        "y": 180,
        "wires": [
            [
                "f328fcb4.91dc"
            ]
        ]
    },
    {
        "id": "efdbccd0.f2f82",
        "type": "exec",
        "z": "5f562f66.a301e",
        "command": "python3 runRT01004.py",
        "addpay": false,
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 350,
        "y": 640,
        "wires": [
            [
                "24005dd1.2fdb82"
            ],
            [
                "f7f2ce33.f776d"
            ],
            []
        ]
    },
    {
        "id": "dae72c23.452bd",
        "type": "ui_chart",
        "z": "5f562f66.a301e",
        "name": "I-Q Plot",
        "group": "67d6e9be.8270f8",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "I-Q Plot",
        "chartType": "line",
        "legend": "false",
        "xformat": "x",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "512",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 780,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "3e88e0d5.feeb1",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Get runRT01004Process",
        "func": "var newMsg = {fill: msg.status.fill, pid:msg.status.text}\nflow.set('runRT01004Process', newMsg);\nreturn null;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 310,
        "y": 420,
        "wires": []
    },
    {
        "id": "ebcc94cf.1f16b8",
        "type": "status",
        "z": "5f562f66.a301e",
        "name": "",
        "scope": [
            "efdbccd0.f2f82"
        ],
        "x": 90,
        "y": 420,
        "wires": [
            [
                "3e88e0d5.feeb1"
            ]
        ]
    },
    {
        "id": "e68a810e.f7863",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Kill redPitayaProcess",
        "func": "var process = flow.get('runRT01004Process');\nvar newMsg = null;\nif (process.fill != 'blue') return  null;\nif (process.pid != undefined)\n{\n    var pid = Number(process.pid.substring(4));\n    newMsg = {topic:'killProcess',payload:pid}\n}\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 360,
        "y": 480,
        "wires": [
            [
                "3132ba84.59a1f6"
            ]
        ]
    },
    {
        "id": "3132ba84.59a1f6",
        "type": "exec",
        "z": "5f562f66.a301e",
        "command": "kill -9 ",
        "addpay": true,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 550,
        "y": 480,
        "wires": [
            [],
            [
                "f7f2ce33.f776d"
            ],
            []
        ]
    },
    {
        "id": "c7bd6706.673068",
        "type": "link out",
        "z": "5f562f66.a301e",
        "name": "New Settings",
        "links": [
            "722a0b67.455f54"
        ],
        "x": 1175,
        "y": 40,
        "wires": []
    },
    {
        "id": "722a0b67.455f54",
        "type": "link in",
        "z": "5f562f66.a301e",
        "name": "restart Scope",
        "links": [
            "c7bd6706.673068"
        ],
        "x": 35,
        "y": 540,
        "wires": [
            [
                "57ce7ea6.d99c2"
            ]
        ]
    },
    {
        "id": "57ce7ea6.d99c2",
        "type": "delay",
        "z": "5f562f66.a301e",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 150,
        "y": 540,
        "wires": [
            [
                "e68a810e.f7863",
                "8bff3d62.56b96"
            ]
        ]
    },
    {
        "id": "8bff3d62.56b96",
        "type": "delay",
        "z": "5f562f66.a301e",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 340,
        "y": 540,
        "wires": [
            [
                "efdbccd0.f2f82"
            ]
        ]
    },
    {
        "id": "24005dd1.2fdb82",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Read Traces",
        "func": "var traceI = [];\nvar traceQ = [];\nvar dataView = new DataView(new ArrayBuffer(4));\nvar ndataPts = 176;\nfor (var irow = 0; irow < ndataPts; ++irow)\n{\n    dataView.setUint8(0, msg.payload[irow * 4]);\n    dataView.setUint8(1, msg.payload[irow * 4 + 1]);\n    dataView.setUint8(2, msg.payload[irow * 4 + 2]);\n    dataView.setUint8(3, msg.payload[irow * 4 + 3]);\n    traceI[irow] = dataView.getFloat32(0 , true);\n    dataView.setUint8(0, msg.payload[(irow + ndataPts) * 4]);\n    dataView.setUint8(1, msg.payload[(irow + ndataPts) * 4 + 1]);\n    dataView.setUint8(2, msg.payload[(irow + ndataPts) * 4 + 2]);\n    dataView.setUint8(3, msg.payload[(irow + ndataPts) * 4 + 3]);\n    traceQ[irow] = dataView.getFloat32(0 , true);\n}\nvar iqDataChart = [\n    {\n        series : [\"TraceI\", \"TraceQ\"],\n        data   : [[],[]],\n        labels : [\"\"]\n    }\n];\nfor (var irow = 0; irow < traceI.length; ++irow)\n{\n    iqDataChart[0].data[0][irow] = {\"x\":irow,\"y\":traceI[irow]};\n    iqDataChart[0].data[1][irow] = {\"x\":irow,\"y\":traceQ[irow]};\n}\niqDataMsg = {topic:'iqDataMsg',payload: iqDataChart};\nreturn [{topic : \"traceData\",payload:{'traceI' : traceI, 'traceQ' : traceQ}},iqDataMsg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 610,
        "y": 640,
        "wires": [
            [
                "849349df.b2d698"
            ],
            [
                "dae72c23.452bd"
            ]
        ]
    },
    {
        "id": "f7f2ce33.f776d",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "runRT01004Process Err",
        "func": "node.warn(msg.payload);\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 650,
        "y": 540,
        "wires": []
    },
    {
        "id": "849349df.b2d698",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Process Data",
        "func": "var device = flow.get('device');\nvar bunchStart = 11;\nvar bunchStop = 164;\n\nvar radToDegrees = 180.0 / Math.PI;\nvar twoPi = 2.0 * Math.PI;\ndevice.beamCurrent.value = 0.0;\ndevice.avgPhase.value = 0.0;\nfor (var ibunch = 0; ibunch < 176; ++ibunch) \n{\n    device.bunchCurrent.value[0][ibunch] = ibunch;\n    device.bunchCurrent.value[1][ibunch] = Math.sqrt(msg.payload.traceI[ibunch] * msg.payload.traceI[ibunch] + msg.payload.traceQ[ibunch] * msg.payload.traceQ[ibunch]);\n    device.beamCurrent.value = device.beamCurrent.value + device.bunchCurrent.value[1][ibunch];\n\n    device.phase.value[0][ibunch]  = ibunch;\n    device.phase.value[1][ibunch]  = 0.0;\n    if ((bunchStart <= ibunch) && (ibunch <= bunchStop))\n    {\n        device.phase.value[1][ibunch] = radToDegrees *  Math.atan2(msg.payload.traceQ[ibunch], msg.payload.traceI[ibunch]);\n        device.avgPhase.value = device.avgPhase.value + device.phase.value[1][ibunch];\n    }\n}\ndevice.avgPhase.value = device.avgPhase.value / (bunchStop - bunchStart + 1.0);\ndevice.avgPhase.value = Math.round(device.avgPhase.value * 1000) / 1000;\nvar phaseHistory = context.get('phaseHistory');\nif (phaseHistory == undefined)\n{\n    phaseHistory = [];\n    for (var ibunch = 0; ibunch < 176; ++ibunch)\n    {\n        phaseHistory[ibunch] = device.phase.value[1][ibunch];\n    }\n}\ndevice.rmsModeAmp.value = 0.0;\nfor (var ibunch = 0; ibunch < 176; ++ibunch)\n{\n    device.difPhase.value[1][ibunch] = device.phase.value[1][ibunch] - phaseHistory[ibunch];\n    phaseHistory[ibunch] = device.phase.value[1][ibunch];\n    device.rmsModeAmp.value = device.rmsModeAmp.value + device.difPhase.value[1][ibunch] * device.difPhase.value[1][ibunch];\n}\ncontext.set('phaseHistory',phaseHistory);\ndevice.rmsModeAmp.value = Math.sqrt(device.rmsModeAmp.value / (bunchStop - bunchStart + 1.0));\ndevice.rmsModeAmp.value = Math.round(device.rmsModeAmp.value * 1000) / 1000;\n\nvar nbunches = bunchStop - bunchStart + 1.0;\ndevice.maxDipoleMode.value = 0;\ndevice.maxDipoleModeAmp.value = 0;\nfor (var imode = 0; imode < 88; ++imode)\n{\n    device.modeM.value[0][imode] = imode;\n    var modeI = 0.0;\n    var modeQ = 0.0;\n    for (var ibunch = bunchStart; ibunch <= bunchStop; ++ibunch)\n    {\n        modeI = modeI + Math.cos(twoPi * imode  * ibunch / 176.0 ) * device.difPhase.value[1][ibunch];\n        modeQ = modeQ + Math.sin(twoPi * imode  * ibunch / 176.0 ) * device.difPhase.value[1][ibunch];\n    }\n    modeI = modeI / nbunches;\n    modeQ = modeQ / nbunches;\n    var modeAmp = Math.sqrt(modeI * modeI + modeQ * modeQ);\n//    device.modeM.value[1][imode] = device.modeM.value[1][imode] + (modeAmp - device.modeM.value[1][imode]) / device.phaseAvg.value;\n    device.modeM.value[1][imode] = Math.round(modeAmp * 1000) / 1000;\n    if (device.maxDipoleModeAmp.value < device.modeM.value[1][imode])\n    {\n        device.maxDipoleMode.value = imode;\n        device.maxDipoleModeAmp.value = device.modeM.value[1][imode];\n    }\n}\nfor (var ibunch = 0; ibunch < 176; ++ibunch) \n{\n    device.bunchCurrent.value[1][ibunch] = Math.round(device.bunchCurrent.value[1][ibunch] * 1000) / 1000;\n    device.phase.value[1][ibunch] = Math.round(device.phase.value[1][ibunch] * 1000) / 1000;;\n    device.difPhase.value[1][ibunch] = Math.round(device.difPhase.value[1][ibunch] * 1000) / 1000;;\n}\ndevice.beamCurrent.value = Math.round(device.beamCurrent.value * 1000) / 1000;\nprocessCompleteMsg = {topic: \"processComplete\", payload:true};\n\nvar bunchCurrentChart = [\n    {\n        series : [\"Bunch Current\"],\n        data   : [[]],\n        labels : [\"\"]\n    }\n];\nfor (var ibunch = 0; ibunch < 176; ++ibunch) \n{\n    bunchCurrentChart[0].data[0][ibunch] = {\"x\":ibunch,\"y\":device.bunchCurrent.value[1][ibunch]};\n}\nbunchCurrentChartMsg = {topic:'bunchCurrentChartMsg',payload: bunchCurrentChart};\n\nvar bunchPhaseChart = [\n    {\n        series : [\"Bunch Phase\"],\n        data   : [[]],\n        labels : [\"\"]\n    }\n];\nfor (var ibunch = 0; ibunch < 176; ++ibunch) \n{\n    bunchPhaseChart[0].data[0][ibunch] = {\"x\":ibunch,\"y\":device.phase.value[1][ibunch]};\n}\nbunchPhaseChartMsg = {topic:'bunchPhaseChartMsg',payload: bunchPhaseChart};\n\nvar diffPhaseChart = [\n    {\n        series : [\"Differential Phase\"],\n        data   : [[]],\n        labels : [\"\"]\n    }\n];\nfor (var ibunch = 0; ibunch < 176; ++ibunch) \n{\n    diffPhaseChart[0].data[0][ibunch] = {\"x\":ibunch,\"y\":device.difPhase.value[1][ibunch]};\n}\ndiffPhaseChartMsg = {topic:'diffPhaseChartMsg', payload: diffPhaseChart};\n\nvar modeChart = [\n    {\n        series : [\"Mode Spectrum\"],\n        data   : [[]],\n        labels : [\"\"]\n    }\n];\nfor (var imode = 0; imode < 88; ++imode) \n{\n    modeChart[0].data[0][imode] = {\"x\":imode,\"y\":device.modeM.value[1][imode]};\n}\nmodeChartMsg = {topic:'modeChartMsg', payload: modeChart};\n\nreturn [processCompleteMsg, bunchCurrentChartMsg, bunchPhaseChartMsg, diffPhaseChartMsg,modeChartMsg]\n",
        "outputs": 5,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 800,
        "y": 620,
        "wires": [
            [
                "9115ea87.0ca208"
            ],
            [
                "85b7adf3.4cecf"
            ],
            [
                "97274c6f.ad1a1"
            ],
            [
                "c78759e8.0e1988"
            ],
            [
                "c82b4aab.f328b8"
            ]
        ]
    },
    {
        "id": "85b7adf3.4cecf",
        "type": "ui_chart",
        "z": "5f562f66.a301e",
        "name": "BunchCurrentChart",
        "group": "67d6e9be.8270f8",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "Bunch Current",
        "chartType": "line",
        "legend": "false",
        "xformat": "x",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "2",
        "removeOlder": 1,
        "removeOlderPoints": "176",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 1070,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "97274c6f.ad1a1",
        "type": "ui_chart",
        "z": "5f562f66.a301e",
        "name": "BunchPhaseChart",
        "group": "67d6e9be.8270f8",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "Bunch Phase",
        "chartType": "line",
        "legend": "false",
        "xformat": "x",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "-20",
        "ymax": "20",
        "removeOlder": 1,
        "removeOlderPoints": "176",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 1070,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "c78759e8.0e1988",
        "type": "ui_chart",
        "z": "5f562f66.a301e",
        "name": "DiffPhaseChart",
        "group": "67d6e9be.8270f8",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "Differential Phase",
        "chartType": "line",
        "legend": "false",
        "xformat": "x",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "-20",
        "ymax": "20",
        "removeOlder": 1,
        "removeOlderPoints": "176",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 1060,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "c82b4aab.f328b8",
        "type": "ui_chart",
        "z": "5f562f66.a301e",
        "name": "ModeChart",
        "group": "67d6e9be.8270f8",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "Mode Spectrum",
        "chartType": "line",
        "legend": "false",
        "xformat": "x",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "5",
        "removeOlder": 1,
        "removeOlderPoints": "88",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 1050,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "b24667cf.ee0f28",
        "type": "inject",
        "z": "5f562f66.a301e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 480,
        "wires": [
            [
                "e68a810e.f7863"
            ]
        ]
    },
    {
        "id": "563aa86c.944fc8",
        "type": "inject",
        "z": "5f562f66.a301e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 640,
        "wires": [
            [
                "efdbccd0.f2f82"
            ]
        ]
    },
    {
        "id": "5023092b.a0fe38",
        "type": "mqtt in",
        "z": "5f562f66.a301e",
        "name": "Subscribe DeviceA",
        "topic": "$(MQTTDEVICEA)",
        "qos": "0",
        "datatype": "auto",
        "broker": "79250bf3.365cc4",
        "x": 110,
        "y": 140,
        "wires": [
            [
                "257906ae.f6991a"
            ]
        ]
    },
    {
        "id": "cbea1b0d.f5d6d8",
        "type": "mqtt out",
        "z": "5f562f66.a301e",
        "name": "Publish Readings",
        "topic": "",
        "qos": "0",
        "retain": "",
        "broker": "79250bf3.365cc4",
        "x": 1270,
        "y": 400,
        "wires": []
    },
    {
        "id": "64ab7ded.516d44",
        "type": "http in",
        "z": "c4285970.3276d8",
        "name": "/oo-spec",
        "url": "/oo-spec",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 580,
        "wires": [
            [
                "e2726f95.705a9"
            ]
        ]
    },
    {
        "id": "e2726f95.705a9",
        "type": "function",
        "z": "c4285970.3276d8",
        "name": "Set Name And Device Type",
        "func": "msg.payload['script'] = {};\nmsg.payload['script']['name'] = msg.payload.name\nmsg.payload['script']['deviceType'] = 'osc-over';\nmsg.payload['script']['project'] = global.get('project');\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 320,
        "y": 580,
        "wires": [
            [
                "80cb6bba.7bb5b8"
            ]
        ]
    },
    {
        "id": "213c7d50.a91c42",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "Set Title",
        "field": "payload.title",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "Spectrogram {{{payload.script.name}}}",
        "output": "str",
        "x": 260,
        "y": 660,
        "wires": [
            [
                "d2d58625.43ddd8"
            ]
        ]
    },
    {
        "id": "812073f0.9bceb",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "javascript",
        "field": "payload.javascript",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "{{{payload.script.global}}}\n{{{payload.script.user}}}\n",
        "output": "str",
        "x": 620,
        "y": 660,
        "wires": [
            [
                "6ff4d5a0.c47ffc"
            ]
        ]
    },
    {
        "id": "59fe7984.ecd0a8",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "body",
        "field": "payload.body",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "{{{payload.html.dashboard}}}\n    <div width=\"100%\">\n        <div class='row' style='padding-bottom: 25px;'>\n            <div class='col-md-12'>\n{{{payload.html.user}}}\n            </div>\n        </div>\n        <div class='row' style='padding-bottom: 25px;'>\n            <div class='col-md-12'>\n{{{payload.html.wifimon}}}\n            </div>\n        </div>\n    </div>",
        "output": "str",
        "x": 930,
        "y": 700,
        "wires": [
            [
                "8e1275b8.fd9808"
            ]
        ]
    },
    {
        "id": "e778fa7f.65bfe8",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "html.wifimon",
        "field": "payload.html.wifimon",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!-- Dashboard HTML -->\n                <div class='card'>\n                    <p class='card-title'>WiFi Connection</p>\n                    <div class='card-body' align=\"center\">\n                        <div class='row'  style='padding-top: 0px;'>\n                            <table width='100%'>\n                                <tr>\n                                    <td width='60%' >\n                                        <span class='card-text' >Device Update</span>\n                                    </td>\n                                    <td width='20%' align='center'></td>\n                                    <td width='20%' align='center'>\n                                        <img src='/img/heartRed.png' id='heartBeatID' width='100px' height='100px'/>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width='60%' >\n                                        <span class='card-text' >Signal Level (dBm)</span>\n                                    </td>\n                                    <td width='20%' align='center'></td>\n                                    <td width='20%' align='center'>\n                                        <span class='card-text' id='signalLevelId' >-100</span>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width='60%' >\n                                        <span class='card-text' >Link Quality (/70)</span>\n                                    </td>\n                                    <td width='20%' align='center'></td>\n                                    <td width='20%' align='center'>\n                                        <span class='card-text' id='linkQualityId' >-1</span>\n                                    </td>\n                                </tr>\n                            </table>\n                        </div>\n                    </div>\n                </div>\n",
        "output": "str",
        "x": 950,
        "y": 660,
        "wires": [
            [
                "59fe7984.ecd0a8"
            ]
        ]
    },
    {
        "id": "9186593.7052ca8",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "html.dashboard",
        "field": "payload.html.dashboard",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "    <div width='100%' style='padding-bottom: 25px;'>\n        <div class='card'>\n            <p class='card-title'>Summary</p>\n            <div class='card-body' align=\"center\" width='100%'>\n               <table width='100%'>\n                    <tr>\n                        <td width='60%' align=\"left\">\n                            <span class=\"tableText\">Beam current (mA)</span>\n                        </td>\n                        <td width='40%' align=\"right\">\n                            <span class=\"card-text\" id=\"beamCurrent\"></span>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td width='60%' align=\"left\">\n                            <span class=\"tableText\">RMS Phase (deg)</span>\n                        </td>\n                         <td width='40%' align=\"right\">\n                            <span class=\"card-text\" id=\"rmsPhase\"></span>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td width='60%' align=\"left\">\n                            <span class=\"tableText\">Max Mode</span>\n                        </td>\n                        <td width='40%' align=\"right\">\n                            <span class=\"card-text\" id=\"maxMode\"></span>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td width='60%' align=\"left\">\n                            <span class=\"tableText\">Mode Amp (deg)</span>\n                        </td>\n                        <td width='40%' align=\"right\">\n                            <span class=\"card-text\" id=\"modeAmplitude\"></span>\n                        </td>\n                     </tr>\n                    <tr>\n                        <td width='60%' align=\"left\">\n                            <span class=\"tableText\">Avg Phase (deg)</span>\n                        </td>\n                       <td width='40%' align=\"right\">\n                            <span class=\"card-text\" id=\"avgPhase\"></span>\n                        </td>\n                    </tr>\n                </table>\n            </div>\n        </div>\n    </div>\n    <div width='100%' style='padding-bottom: 25px;'>\n        <div class='card'>\n            <p class='card-title'>Mode Spectrum</p>\n            <div class='card-body' align=\"center\" width='100%'>\n                <div id=\"spectrogram\"></div>\n                <div class=\"row\"> \n                    <div class=\"col-md-5\" align=\"left\" >\n                        <span class=\"card-text\">Start Time</span>\n                    </div>\n                    <div class=\"col-md-7\">\n                        <span class=\"card-text\" id=\"startTime\"></span>\n                    </div>\n                </div>\n                <div class=\"row\"> \n                    <div class=\"col-md-5\"  align=\"left\">\n                        <span class=\"card-text\" >Stop Time</span>\n                    </div>\n                    <div class=\"col-md-7\">\n                        <span class=\"card-text\" id=\"stopTime\" ></span>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div width='100%' style='padding-bottom: 25px;'>\n        <div class='card'>\n            <p class='card-title'>Display Control</p>\n            <div class='card-body' align=\"center\" width='100%'>\n                <div class=\"row\"> \n                    <div class=\"col-md-6\" align=\"center\" style=\"padding-top:10px;padding-bottom:10px;\">\n                        <button class=\"btn jumbotron-button btn-block card-text\" id=\"freezeButton\" type=\"button\" onclick=\"freezeRun()\"></button>\n                    </div>\n                    <div class=\"col-md-6\" align=\"center\" style=\"padding-top:10px;padding-bottom:10px;\">\n                        <button class=\"btn jumbotron-button btn-block card-text\" id=\"birdsEyeButton\" type=\"button\" onclick=\"birdsEyeView()\">Birds Eye</button>\n                    </div>\n                </div>\n                <div class=\"row\"> \n                    <div class=\"col-md-6\" align=\"center\" style=\"padding-top:10px;padding-bottom:10px;\">\n                        <button class=\"btn jumbotron-button btn-block card-text\" id=\"sliceViewButton\" type=\"button\" onclick=\"sliceView()\">Slice View</button>\n                    </div>\n                    <div class=\"col-md-6\" align=\"center\" style=\"padding-top:10px;padding-bottom:10px;\">\n                        <button class=\"btn jumbotron-button btn-block card-text\" id=\"sliceViewButton\" type=\"button\" onclick=\"topView()\">Top View</button>\n                    </div>\n                </div>\n                <div class=\"row\"> \n                    <div class=\"col-md-5\" align=\"right\" >\n                        <span class=\"card-text\" >PlotSlices</span>\n                    </div>\n                    <div class=\"col-md-7\">\n                        <input class=\"form-control center-justify big-text\" id=\"plotslices\" type=\"text\" value=\"0\" />\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n",
        "output": "str",
        "x": 960,
        "y": 580,
        "wires": [
            [
                "63ab4c79.b29664"
            ]
        ]
    },
    {
        "id": "80cb6bba.7bb5b8",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "navBarIcon",
        "field": "payload.navBarIcon",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "yellowSpectrum.png",
        "output": "str",
        "x": 270,
        "y": 620,
        "wires": [
            [
                "213c7d50.a91c42"
            ]
        ]
    },
    {
        "id": "63ab4c79.b29664",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "html.user",
        "field": "payload.html.user",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "                <div class='card' id='userCardId'>\n                    <div class='card-body' align=\"center\">\n                        <table width=\"100%\">\n                            <tr>\n                                <td  align=\"left\">\n                                     <span class='card-text' style='color:black;'>User:</span>\n                                </td>\n                                <td  align=\"right\">\n                                     <span class='card-text' id='usernameId'></span>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td  align=\"left\">\n                                    <span class='card-text' style='color:black;'>Time left:</span>\n                                </td>\n                                <td  align=\"right\">\n                                     <span class='card-text' id='expTimeId'></span>\n                                </td>\n                            </tr>\n                        </table>\n                        <table width=\"100%\">\n                            <tr>\n                                <td width=\"40%\">\n                                    <button class='btn btn-block card-button big-text' id='logoutButton' onclick=\"renew()\" >Renew</button>\n                                </td>\n                                <td width=\"10%\"></td>\n                                <td width=\"40%\">\n                                    <button class='btn btn-block card-button big-text' id='logoutButton' onclick=\"logout()\" >Logout</button>\n                                </td>\n                            </tr>\n                        </table>\n                    </div>\n                </div>\n",
        "output": "str",
        "x": 940,
        "y": 620,
        "wires": [
            [
                "e778fa7f.65bfe8"
            ]
        ]
    },
    {
        "id": "31fcc5a6.072aca",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "script.user",
        "field": "payload.script.user",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "        function getCreds()\n        {\n            var now = new Date().getTime();\n            var expDate = Number(getCookie('ExpDate'));\n            if (expDate > 0)\n            {\n                expDate = expDate - now;\n                if(expDate < 0)\n                {\n                    logout();\n                }\n                else\n                {\n                    var hours = Math.floor(expDate / 3600000);\n                    var minutes = expDate - hours * 3600000;\n                    minutes = Math.floor(minutes / 60000);\n                    var seconds = expDate - (hours * 3600000) - (minutes * 60000);\n                    seconds = Math.floor(seconds / 1000);\n                    hours = hours.toString();\n                    if (hours.length == 1) hours = '0' + hours; \n                    minutes = minutes.toString();\n                    if (minutes.length == 1) minutes = '0' + minutes; \n                    seconds = seconds.toString();\n                    if (seconds.length == 1) seconds = '0' + seconds; \n                    var timeString = hours + ':' + minutes + ':' + seconds;\n                    $('#usernameId').text(getCookie('Username'));\n                    $('#expTimeId').text(timeString);\n                }\n            }\n            else\n            {\n                $('#usernameId').text(getCookie('Username'));\n                $('#expTimeId').text('Forever');\n            }\n        }\n        function logout()\n        {\n            document.cookie = project + \"Role= ; expires = Thu, 01 Jan 1970 00:00:00 GMT\";\n            document.cookie = project + \"ExpDate= ; expires = Thu, 01 Jan 1970 00:00:00 GMT\";\n            document.cookie = project + \"Username= ; expires = Thu, 01 Jan 1970 00:00:00 GMT\";\n            window.location.href = \"/\";\n        }\n        function renew()\n        {\n            var actionMsg = {};\n            sendActionMsg('renew', 'renew', actionMsg);\n        }\n        function updateCookie(msg)\n        {\n            document.cookie = project + \"Role=\" + msg.role;\n            document.cookie = project + \"ExpDate=\" + msg.expDate;\n            document.cookie = project + \"Username=\" + msg.username;\n        }\n        function downloadToken()\n        {\n            downloadString(getCookie(\"Role\"), \"text/plain\", project + \"-token.txt\");\n        }\n// from https://gist.github.com/danallison/3ec9d5314788b337b682\n        function downloadString(text, fileType, fileName) \n        {\n            var blob = new Blob([text], { type: fileType });\n            \n            var a = document.createElement('a');\n            a.download = fileName;\n            a.href = URL.createObjectURL(blob);\n            a.dataset.downloadurl = [fileType, a.download, a.href].join(':');\n            a.style.display = \"none\";\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            setTimeout(function() { URL.revokeObjectURL(a.href); }, 1500);\n        }",
        "output": "str",
        "x": 630,
        "y": 620,
        "wires": [
            [
                "812073f0.9bceb"
            ]
        ]
    },
    {
        "id": "8e1275b8.fd9808",
        "type": "subflow:8341090a.df9758",
        "z": "c4285970.3276d8",
        "name": "",
        "x": 1150,
        "y": 700,
        "wires": []
    },
    {
        "id": "6ff4d5a0.c47ffc",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "extraScripts",
        "field": "payload.extraScripts",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "    <script src=\"/scripts/visDist/vis.js\"></script>\n    ",
        "output": "str",
        "x": 630,
        "y": 700,
        "wires": [
            [
                "9186593.7052ca8"
            ]
        ]
    },
    {
        "id": "bdfaed58.76eda",
        "type": "websocket in",
        "z": "c4285970.3276d8",
        "name": "/oo-spec/websocket",
        "server": "e1c6f2d2.ea0b9",
        "client": "",
        "x": 130,
        "y": 800,
        "wires": [
            [
                "cf44c9f4.bf1b48"
            ]
        ]
    },
    {
        "id": "88f90e02.973ed",
        "type": "websocket out",
        "z": "c4285970.3276d8",
        "name": "/oo-spec/websocket",
        "server": "e1c6f2d2.ea0b9",
        "client": "",
        "x": 820,
        "y": 800,
        "wires": []
    },
    {
        "id": "cf44c9f4.bf1b48",
        "type": "link out",
        "z": "c4285970.3276d8",
        "name": "oo-spec  Web socket out",
        "links": [
            "2f289f87.fe2ff"
        ],
        "x": 295,
        "y": 800,
        "wires": []
    },
    {
        "id": "58095040.115ef",
        "type": "link in",
        "z": "c4285970.3276d8",
        "name": "oo-spec Web socket in",
        "links": [
            "1cdcbcd8.9514e3"
        ],
        "x": 655,
        "y": 800,
        "wires": [
            [
                "88f90e02.973ed"
            ]
        ]
    },
    {
        "id": "d2d58625.43ddd8",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "script.global",
        "field": "payload.script.global",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "// Global Javascript\n        useWebSockets(true);\n        var mqttDevice = null;\n        var device = null;\n        var pingInterval = 5000;\n        var lastPing = 0;\n\n        var restfulDevice = \n        {\n            deviceType  : '{{{payload.script.deviceType}}}',\n            name        : '{{{payload.script.name}}}',\n            project     : '{{{payload.script.project}}}'\n        };\n\n        var graph3d = null;\n        var itimeSlice = 0;\n        var timeMax = 320;\n        var dataArray = [];\n        var timeStamp = [];\n        var deltaT = 0;\n        var freeze = false;\n        var sliceViewActive = false;\n        var birdsEyeViewActive = false;\n        var topViewActive = false;\n        var birdsEyeTimeMax = 320;\n        var plotStarted = false;\n        \n        var threedPlotOptions =\n        {\n            width: '850px',\n            height: '600px',\n            style: 'surface',\n            showPerspective: false,\n            showGrid: true,\n            showShadow: false,\n            keepAspectRatio: false,\n            verticalRatio: 0.6,\n            showZAxis: true,\n            xLabel: 'x',\n            yLabel: 'Time',\n            tooltip: true,\n            axisColor: '#000000',\n        };\n\n        function onDocumentReady()\n        {\n            setRemoteApp(false);\n            if (remoteApp)\n            {\n                getCreds();\n                setInterval(function(){getCreds();}, 1000);\n            }\n            else\n            {\n                $('#userCardId').hide();\n            }\n            setInterval(function()\n            {\n                var now = new Date().getTime();\n                if ((now - lastPing) > pingInterval)\n                {\n                    lastPing = now;\n                    var actionMsg = \n                        {\n                            topic   : restfulDevice.project + '/' +  restfulDevice.deviceType + '/' +  restfulDevice.name + '/ping',\n                            payload : true\n                        };\n                    sendActionMsg('ping', 'ping', actionMsg);\n               }\n            }, 1000);\n            $(\"#freezeButton\").text('Running');\n            $(\"#plotslices\").val(timeMax.toString());\n            $(\"#plotslices\").change(function()\n            {\n              timeMax = Number($(\"#plotslices\").val());\n              if (timeMax < 2)\n              {\n                  alert('Number of plot slices must be greater than 1');\n                  timeMax = 2;\n              }\n              birdsEyeTimeMax = timeMax;\n              $(\"#plotslices\").val(timeMax.toString());\n              dataArray = [];\n              itimeSlice = 0;\n              plotStarted = false;\n            });\n            sliceViewActive = false;\n            birdsEyeViewActive = true;\n            topViewActive = false;\n        }\n        function onWebSocketOpen()\n        {\n            acknowledgeDialog('Alert', 'Wait!', 'Contacting the Mother Ship...');\n        }\n        function onWebSocketClose()\n        {\n            \n        }\n        function onWebSocketMessage(msg)\n        {\n            switch(msg.topic)\n            {\n                case 'readings':\n                    if ((msg.mqttDevice.name == restfulDevice.name) && (msg.mqttDevice.deviceType == restfulDevice.deviceType)  && (msg.mqttDevice.project == restfulDevice.project) )\n                    {\n                        lastPing = new Date().getTime();\n                        heartbeat();\n                        device = JSON.parse(pako.inflate(msg.payload, { to: 'string' }));\n                        mqttDevice = msg.mqttDevice;\n                        updateDmaReadings();\n                    }\n                    break;\n                case 'readDatabase':\n                    if (msg.userID == userID)\n                    {\n                    }\n                    break;\n                case 'renew':\n                    if (msg.userID == userID)\n                    {\n                        updateCookie(msg);\n                    }\n                    break;\n                case 'permissionError':\n                    if (msg.userID == userID)\n                    {\n                        acknowledgeDialog('Permission', 'Error', msg.payload);\n                    }\n                    break;\n                case 'loginExpired':\n                    if (msg.userID == userID)\n                    {\n                       location.reload();\n                    }\n                    break;\n                default:\n                    break;\n            }\n        }\n        function updateDmaReadings()\n        {\n            globalData();\n            arrayData();\n            $( \"#acknowledgeDialog\" ).dialog('close');\n            \n        }\n        function globalData()\n        {\n            $('#linkQualityId').text(device.linkQuality.value);\n            $('#signalLevelId').text(device.signalLevel.value);\n            $(\"#beamCurrent\").text(Math.round(device.beamCurrent.value * 100.0) / 100.0);\n            $(\"#rmsPhase\").text(Math.round(device.rmsModeAmp.value * 100.0) / 100.0);\n            $(\"#maxMode\").text(device.maxDipoleMode.value);\n            $(\"#modeAmplitude\").text(Math.round(device.maxDipoleModeAmp.value * 100.0) / 100.0);\n            $(\"#avgPhase\").text(Math.round(device.avgPhase.value * 100.0) / 100.0);\n\n        }\n        function arrayData()\n        {\n            var modeM = device.modeM.value;\n            var npts = modeM[0].length;\n            if(!plotStarted)\n            {\n                dataArray = [];\n                for (var ix = 0; ix < npts; ++ix)\n                {\n                      dataArray[ix] =\n                      {\n                        'x': ix,\n                        'y': 0,\n                        'z': modeM[1][ix],\n                        'style': modeM[1][ix]\n                      };\n                    }\n            var container = document.getElementById('spectrogram');\n        \n            graph3d = new vis.Graph3d(container, dataArray, threedPlotOptions);\n            $(\"#startTime\").text(new Date().toLocaleString());\n            $(\"#stopTime\").text(new Date().toLocaleString());\n            graph3d.on('cameraPositionChange', onCameraPositionChange);\n            if (sliceViewActive) sliceView();\n            if (birdsEyeViewActive) birdsEyeView();\n            if (topViewActive) topView();\n            plotStarted = true;\n          }\n          else\n          {\n            if (freeze) return;\n            if (itimeSlice < timeMax)\n            {\n              timeStamp[itimeSlice] = new Date().getTime();\n              deltaT = (timeStamp[itimeSlice] - timeStamp[0]) / 1000;\n              for (var ix = 0; ix < npts; ++ix)\n              {\n                dataArray[itimeSlice * npts + ix] =\n                {\n                  'x': ix,\n                  'y': deltaT,\n                  'z': modeM[1][ix],\n                  'style': modeM[1][ix]\n                };\n              }\n              ++itimeSlice;\n            }\n            else\n            {\n              for (var itime = 0; itime < (timeMax - 1); ++itime)\n              {\n                timeStamp[itime] = timeStamp[itime + 1];\n                deltaT = (timeStamp[itime] - timeStamp[0]) / 1000;\n                for (var ix = 0; ix < npts; ++ix)\n                {\n                  dataArray[itime * npts + ix] =\n                  {\n                    'x': dataArray[(itime + 1) * npts + ix].x,\n                    'y': deltaT,\n                    'z': dataArray[(itime + 1) * npts + ix].z,\n                    'style': dataArray[(itime + 1) * npts + ix].style\n                  };\n                }\n              }\n              timeStamp[timeMax - 1] = new Date().getTime();\n              deltaT = (timeStamp[timeMax - 1] - timeStamp[0]) / 1000;\n              for (var ix = 0; ix < npts; ++ix)\n              {\n                dataArray[(timeMax - 1) * npts + ix] =\n                {\n                  'x': ix,\n                  'y': deltaT,\n                  'z': modeM[1][ix],\n                  'style': modeM[1][ix]\n                };\n              }\n            }\n            $(\"#startTime\").text(new Date(timeStamp[0]).toLocaleString());\n            $(\"#stopTime\").text(new Date(timeStamp[itimeSlice - 1]).toLocaleString());\n            graph3d.setData(dataArray);\n          }\n        }\n        function freezeRun()\n        {\n          freeze = !freeze;\n          if (freeze)\n          {\n            $(\"#freezeButton\").text('Frozen');\n          }\n          else\n          {\n            $(\"#freezeButton\").text('Running');\n          }\n        \n        }\n        \n        function birdsEyeView()\n        {\n          var horzAngle = 315.0 * 3.1415927 / 180.0;\n          var vertAngle = 45.0 * 3.1415927 / 180.0;\n          graph3d.setCameraPosition({'horizontal': horzAngle, 'vertical': vertAngle, 'distance': 2.0});\n          if (sliceViewActive)\n          {\n            timeMax =  birdsEyeTimeMax;\n            $(\"#plotslices\").val(timeMax.toString());\n          }\n            sliceViewActive = false;\n            birdsEyeViewActive = true;\n            topViewActive = false;\n        \n        }\n        function sliceView()\n        {\n          var horzAngle = 0.0 * 3.1415927 / 180.0;\n          var vertAngle = 0.0 * 3.1415927 / 180.0;\n          graph3d.setCameraPosition({'horizontal': horzAngle, 'vertical': vertAngle, 'distance': 1.1});\n          timeMax = 2;\n          $(\"#plotslices\").val(timeMax.toString());\n          itimeSlice = 0;\n          plotStarted = false;\n          sliceViewActive = true;\n          birdsEyeViewActive = false;\n          topViewActive = false;\n        \n        }\n        function topView()\n        {\n          var horzAngle = 0 * 3.1415927 / 180.0;\n          var vertAngle = 90 * 3.1415927 / 180.0;\n          graph3d.setCameraPosition({'horizontal': horzAngle, 'vertical': vertAngle, 'distance': 2.0});\n          if (sliceViewActive)\n          {\n            timeMax =  birdsEyeTimeMax;\n            $(\"#plotslices\").val(timeMax.toString());\n          }\n            sliceViewActive = false;\n            birdsEyeViewActive = false;\n            topViewActive = true;\n        \n        }\n        function onCameraPositionChange(event)\n        {\n          if (sliceViewActive) sliceView();\n          if (birdsEyeViewActive) birdsEyeView();\n          if (topViewActive) topView();\n        }\n",
        "output": "str",
        "x": 630,
        "y": 580,
        "wires": [
            [
                "31fcc5a6.072aca"
            ]
        ]
    },
    {
        "id": "3b856a92.2a8196",
        "type": "http in",
        "z": "c4285970.3276d8",
        "name": "/oo-display",
        "url": "/oo-display",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 940,
        "wires": [
            [
                "94cd385b.eebf08"
            ]
        ]
    },
    {
        "id": "94cd385b.eebf08",
        "type": "function",
        "z": "c4285970.3276d8",
        "name": "Set Name And Device Type",
        "func": "msg.payload['script'] = {};\nmsg.payload['script']['name'] = msg.payload.name\nmsg.payload['script']['deviceType'] = 'osc-over';\nmsg.payload['script']['project'] = global.get('project');\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 320,
        "y": 940,
        "wires": [
            [
                "22232285.e3daae"
            ]
        ]
    },
    {
        "id": "2469f517.1f76ba",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "Set Title",
        "field": "payload.title",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "Display {{{payload.script.name}}}\n",
        "output": "str",
        "x": 260,
        "y": 1020,
        "wires": [
            [
                "b06e7c22.a3153"
            ]
        ]
    },
    {
        "id": "b06e7c22.a3153",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "script.global",
        "field": "payload.script.global",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "// Global Javascript\n        useWebSockets(true);\n        var mqttDevice = null;\n        var device = null;\n        var pingInterval = 5000;\n        var lastPing = 0;\n\n        var restfulDevice = \n        {\n            deviceType  : '{{{payload.script.deviceType}}}',\n            name        : '{{{payload.script.name}}}',\n            project     : '{{{payload.script.project}}}'\n        };\n\n        var oldModesToPlot = [-1,-1,-1,-1];\n        var modesToPlot = [-1,-1,-1,-1];\n        var modesToPlotColor = ['blue', 'red', 'orange', 'magenta'];\n        var modeDisplayAttrName = ['modeDisplayA', 'modeDisplayB', 'modeDisplayC', 'modeDisplayD'];\n        var modeDisplayEditName = '';\n        var plotStart = new Date();\n        var modeEvTraceData = [{},{},{},{}];\n        var modeEvLayout =\n        {   \n            title: 'Mode Evolution',\n            showlegend: true,\n            legend:{x: 0,y: 1.35 },\n            xaxis: {title: 'Time (sec)'},\n            yaxis: {title: 'Mode Amplitude (deg)'},\n        };\n\n        function onDocumentReady()\n        {\n            setRemoteApp(false);\n            if (remoteApp)\n            {\n                getCreds();\n                setInterval(function(){getCreds();}, 1000);\n            }\n            else\n            {\n                $('#userCardId').hide();\n            }\n            setInterval(function()\n            {\n                var now = new Date().getTime();\n                if ((now - lastPing) > pingInterval)\n                {\n                    lastPing = now;\n                    var actionMsg = \n                        {\n                            topic   : restfulDevice.project + '/' +  restfulDevice.deviceType + '/' +  restfulDevice.name + '/ping',\n                            payload : true\n                        };\n                    sendActionMsg('ping', 'ping', actionMsg);\n               }\n            }, 1000);\n            $('#refreshModePlot').hide();\n\n        }\n        function onWebSocketOpen()\n        {\n             acknowledgeDialog('Alert', 'Wait!', 'Contacting the Mother Ship...');\n        }\n        function onWebSocketClose()\n        {\n            \n        }\n        function onWebSocketMessage(msg)\n        {\n            switch(msg.topic)\n            {\n                case 'readings':\n                    if ((msg.mqttDevice.name == restfulDevice.name) && (msg.mqttDevice.deviceType == restfulDevice.deviceType)  && (msg.mqttDevice.project == restfulDevice.project) )\n                    {\n                        lastPing = new Date().getTime();\n                        heartbeat();\n                        device = JSON.parse(pako.inflate(msg.payload, { to: 'string' }));\n                        mqttDevice = msg.mqttDevice;\n                        updateDmaReadings();\n                    }\n                    break;\n                case 'readDatabase':\n                    if (msg.userID == userID)\n                    {\n                    }\n                    break;\n                case 'renew':\n                    if (msg.userID == userID)\n                    {\n                        updateCookie(msg);\n                    }\n                    break;\n                case 'permissionError':\n                    if (msg.userID == userID)\n                    {\n                        acknowledgeDialog('Permission', 'Error', msg.payload);\n                    }\n                    break;\n                case 'loginExpired':\n                    if (msg.userID == userID)\n                    {\n                       location.reload();\n                    }\n                    break;\n                default:\n                    break;\n            }\n        }\n        function updateDmaReadings()\n        {\n            phasePlot();\n            modePlot();\n            bunchPlot();\n            dataGlobal();\n\n            var startModeEvPlot = false;\n            for (var ii = 0; ii < modesToPlot.length; ++ii)\n            {\n                if (modesToPlot[ii] != oldModesToPlot[ii]) \n                {\n                    startModeEvPlot = true;\n                    $('#' + modeDisplayAttrName[ii]).html(modesToPlot[ii].toString());\n                }\n                oldModesToPlot[ii] = modesToPlot[ii];\n            }\n            if (startModeEvPlot)\n            {\n                initModeEvPlot();\n            }\n            updateModeEvPlot();\n\n            $( \"#acknowledgeDialog\" ).dialog('close');\n\n     \n        }\n        function dataGlobal()\n        {\n            $('#linkQualityId').text(device.linkQuality.value);\n            $('#signalLevelId').text(device.signalLevel.value);\n            $(\"#beamCurrent\").text(Math.round(device.beamCurrent.value * 100.0) / 100.0);\n            $(\"#rmsPhase\").text(Math.round(device.rmsModeAmp.value * 100.0) / 100.0);\n            $(\"#maxMode\").text(device.maxDipoleMode.value);\n            $(\"#modeAmplitude\").text(Math.round(device.maxDipoleModeAmp.value * 100.0) / 100.0);\n            $(\"#avgPhase\").text(Math.round(device.avgPhase.value * 100.0) / 100.0);\n        }\n        function phasePlot()\n        {\n            var layout =\n            {   \n                title: 'Phase',\n                showlegend: true,\n                legend:{x: 0,y: 1.2 },\n                xaxis: {title: 'Bunch Number'},\n                yaxis: {title: 'phase (deg)'},\n                yaxis2: {title: 'Diff. phase (deg)', overlaying: 'y', side: 'right'}\n            };\n            var traceData = [{},{}];\n            var phase = device.phase.value;\n            var difPhase = device.difPhase.value;\n            traceData[0] = {x: [],y: [],name: 'phase',      yaxis: 'y1',type: 'scatter',mode: 'lines'};\n            traceData[1] = {x: [],y: [],name: 'Diff. phase',yaxis: 'y2',type: 'scatter',mode: 'lines' };\n            for (var ii = 0; ii < phase[0].length; ++ii)\n            {\n                traceData[0].x[ii] = phase[0][ii];\n                traceData[0].y[ii] = phase[1][ii];\n                traceData[1].x[ii] = difPhase[0][ii];\n                traceData[1].y[ii] = difPhase[1][ii];\n            }\n            Plotly.newPlot('phasePlot', traceData, layout);\n        }\n        function modePlot()\n        {\n            var layout =\n            {   \n                title: 'Mode Spectrum',\n                xaxis: {title: 'Mode Number'},\n                yaxis: {title: 'Amplitude (deg)'},\n            };\n            var modeM = device.modeM.value;\n            var traceData = [{}];\n            traceData[0] = {x: [],y: [],name: 'mode', yaxis: 'y1',type: 'scatter',mode: 'lines'};\n            for (var ii = 0; ii < modeM[0].length; ++ii)\n            {\n                traceData[0].x[ii] = modeM[0][ii];\n                traceData[0].y[ii] = modeM[1][ii];\n            }\n            Plotly.newPlot('modePlot', traceData, layout);\n        }\n        function bunchPlot()\n        {\n            var layout =\n            {   \n                title: 'Bunch Intensity',\n                showlegend: true,\n                legend:{x: 0,y: 1.2 },\n                xaxis: {title: 'Bunch Number'},\n                yaxis: {title: 'Bunch Current (mA)'}\n            };\n            var bunchCurrent = device.bunchCurrent.value;\n            var traceData = [{}];\n            traceData[0] = {x: [],y: [],name: 'bunch Intensity', yaxis: 'y1',type: 'scatter',mode: 'lines'};\n            for (var ii = 0; ii < bunchCurrent[0].length; ++ii)\n            {\n                traceData[0].x[ii] = bunchCurrent[0][ii];\n                traceData[0].y[ii] = bunchCurrent[1][ii];\n            }\n            Plotly.newPlot('bunchPlot', traceData, layout);\n        }\n        function updateModeEvPlot()\n        {\n            var plotableMode = false;\n            for (var imode = 0; imode < modesToPlot.length; ++imode)\n            {\n                if (modesToPlot[imode] > -1) plotableMode = true;\n            }\n            if (!plotableMode) return;\n            $('#refreshModePlot').show();\n\n            var modeM = device.modeM.value;\n            var xtime = (new Date().getTime() - plotStart.getTime()) / 1000;\n            for (var imode = 0; imode < modesToPlot.length; ++imode)\n            {\n                if (modesToPlot[imode] > -1)\n                {\n                    modeEvTraceData[imode].x.push(xtime);\n                    modeEvTraceData[imode].y.push(modeM[1][modesToPlot[imode]]);\n                }\n            }\n            if (modeEvTraceData[0].x.length > 500)\n            {\n                for (var imode = 0; imode < modesToPlot.length; ++imode)\n                {\n                    if (modesToPlot[imode] > -1)\n                    {\n                        modeEvTraceData[imode].x.splice(0,1);\n                        modeEvTraceData[imode].y.splice(0,1);\n                    }\n                }\n            }\n            Plotly.newPlot('modeEvPlot', modeEvTraceData, modeEvLayout);\n        }\n        function initModeEvPlot()\n        {\n            $('#refreshModePlot').hide();\n            \n            for (var imode = 0; imode < modesToPlot.length; ++imode)\n            {\n                if (modesToPlot[imode] > -1)\n                {\n                    modeEvTraceData[imode] = \n                    {\n                        x: [],\n                        y: [],\n                        name: 'Mode ' + modesToPlot[imode].toString(), \n                        yaxis: 'y1',\n                        type: 'scatter',\n                        mode: 'lines',\n                        line: {color: modesToPlotColor[imode]}\n                    };\n                }\n            }\n           \n        }\n        function changeModeDisplay(itrace)\n        {\n            $( \"#editDeviceDialog\" ).dialog( \"option\", \"title\", \"Edit\"); \n            $( \"#editModeEvTraceDialogAttribute\").html('Trace ' + (itrace + 1).toString());\n            modeDisplayEditName = modeDisplayAttrName[itrace];\n\n            $( \"#modeEvTraceNumber\").val(modesToPlot[itrace]);\n\n            $( \"#editModeEvTraceDialog\" ).dialog( \"open\" );\n        }\n// Edit Temp JavaScript\n       $( function() \n        {\n            $( \"#editModeEvTraceDialog\" ).dialog(\n                {\n//                    closeOnEscape: false,\n//                    open: function(event, ui) {$(\".ui-dialog-titlebar-close\", ui.dialog | ui).hide();},\n                    width:    640,\n                    autoOpen: false,\n                    buttons:\n                    [\n                        {\n                            text: \"Set\",\n                            click: function() {setModeEvTraceNumber(); $( this ).dialog( \"close\" );},\n                            showText: false\n                        },\n                        {\n                            text: \"Cancel\",\n                            click: function() {$( this ).dialog( \"close\" );},\n                            showText: false\n                        }\n                    ]\n                });\n        } );\n        function setModeEvTraceNumber()\n        {\n            if (isNaN( $('#modeEvTraceNumber').val()) )\n            {\n                acknowledgeDialog('Error', 'Entry not a number!', modeDisplayEditName);\n                return;\n            }\n            var plotIndex = -1;\n            if (modeDisplayEditName == modeDisplayAttrName[0]) plotIndex = 0;\n            if (modeDisplayEditName == modeDisplayAttrName[1]) plotIndex = 1;\n            if (modeDisplayEditName == modeDisplayAttrName[2]) plotIndex = 2;\n            if (modeDisplayEditName == modeDisplayAttrName[3]) plotIndex = 3;\n            modesToPlot[plotIndex]  = Number($('#modeEvTraceNumber').val());\n        }\n",
        "output": "str",
        "x": 630,
        "y": 940,
        "wires": [
            [
                "cdf4ccbd.a48bd"
            ]
        ]
    },
    {
        "id": "d3532769.2000a8",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "javascript",
        "field": "payload.javascript",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "{{{payload.script.global}}}\n{{{payload.script.user}}}\n",
        "output": "str",
        "x": 620,
        "y": 1020,
        "wires": [
            [
                "5df77d3e.226644"
            ]
        ]
    },
    {
        "id": "5e845907.80bda8",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "body",
        "field": "payload.body",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "{{{payload.html.dashboard}}}\n    <div width=\"100%\">\n        <div class='row' style='padding-bottom: 25px;'>\n            <div class='col-md-12'>\n{{{payload.html.user}}}\n            </div>\n        </div>\n        <div class='row' style='padding-bottom: 25px;'>\n            <div class='col-md-12'>\n{{{payload.html.wifimon}}}\n            </div>\n        </div>\n    </div>",
        "output": "str",
        "x": 930,
        "y": 1060,
        "wires": [
            [
                "be5f9d85.ccb1a"
            ]
        ]
    },
    {
        "id": "62c69fde.c087f",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "html.wifimon",
        "field": "payload.html.wifimon",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!-- Dashboard HTML -->\n                <div class='card'>\n                    <p class='card-title'>WiFi Connection</p>\n                    <div class='card-body' align=\"center\">\n                        <div class='row'  style='padding-top: 0px;'>\n                            <table width='100%'>\n                                <tr>\n                                    <td width='60%' >\n                                        <span class='card-text' >Device Update</span>\n                                    </td>\n                                    <td width='20%' align='center'></td>\n                                    <td width='20%' align='center'>\n                                        <img src='/img/heartRed.png' id='heartBeatID' width='100px' height='100px'/>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width='60%' >\n                                        <span class='card-text' >Signal Level (dBm)</span>\n                                    </td>\n                                    <td width='20%' align='center'></td>\n                                    <td width='20%' align='center'>\n                                        <span class='card-text' id='signalLevelId' >-100</span>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width='60%' >\n                                        <span class='card-text' >Link Quality (/70)</span>\n                                    </td>\n                                    <td width='20%' align='center'></td>\n                                    <td width='20%' align='center'>\n                                        <span class='card-text' id='linkQualityId' >-1</span>\n                                    </td>\n                                </tr>\n                            </table>\n                        </div>\n                    </div>\n                </div>\n",
        "output": "str",
        "x": 950,
        "y": 1020,
        "wires": [
            [
                "5e845907.80bda8"
            ]
        ]
    },
    {
        "id": "5df77d3e.226644",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "html.dashboard",
        "field": "payload.html.dashboard",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "    <div width='100%' style='padding-bottom: 25px;'>\n        <div class='card'>\n            <p class='card-title'>Summary</p>\n            <div class='card-body' align=\"center\" width='100%'>\n               <table width='100%'>\n                    <tr>\n                        <td width='60%' align=\"left\">\n                            <span class=\"tableText\">Beam current (mA)</span>\n                        </td>\n                        <td width='40%' align=\"right\">\n                            <span class=\"card-text\" id=\"beamCurrent\"></span>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td width='60%' align=\"left\">\n                            <span class=\"tableText\">RMS Phase (deg)</span>\n                        </td>\n                         <td width='40%' align=\"right\">\n                            <span class=\"card-text\" id=\"rmsPhase\"></span>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td width='60%' align=\"left\">\n                            <span class=\"tableText\">Max Mode</span>\n                        </td>\n                        <td width='40%' align=\"right\">\n                            <span class=\"card-text\" id=\"maxMode\"></span>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td width='60%' align=\"left\">\n                            <span class=\"tableText\">Mode Amp (deg)</span>\n                        </td>\n                        <td width='40%' align=\"right\">\n                            <span class=\"card-text\" id=\"modeAmplitude\"></span>\n                        </td>\n                     </tr>\n                    <tr>\n                        <td width='60%' align=\"left\">\n                            <span class=\"tableText\">Avg Phase (deg)</span>\n                        </td>\n                       <td width='40%' align=\"right\">\n                            <span class=\"card-text\" id=\"avgPhase\"></span>\n                        </td>\n                    </tr>\n                </table>\n            </div>\n        </div>\n    </div>\n    <div style='padding-bottom: 25px;'>\n        <div class='card'>\n            <p class='card-title'>Mode Spectrum</p>\n            <div class='card-body'>\n                <div id=\"modePlot\"></div>\n            </div>\n        </div>\n    </div>\n    <div style='padding-bottom: 25px;'>\n        <div class='card'>\n            <p class='card-title'>Mode Evolution</p>\n            <div class='card-body'>\n                <table width='100%' id='modeEvTable'>\n                    <tr>\n                        <td align=\"center\" width='20%'>\n                            <span class=\"tableHeading big-text\">Tr 1</span>\n                        </td>\n                        <td align=\"center\" width='20%'>\n                            <span class=\"tableHeading big-text\">Tr 2</span>\n                        </td>\n                        <td align=\"center\" width='20%'>\n                            <span class=\"tableHeading big-text\">Tr 3</span>\n                        </td>\n                        <td align=\"center\" width='20%'>\n                            <span class=\"tableHeading big-text\">Tr 4</span>\n                        </td>\n                        <td align=\"center\" width='20%'>\n                        </td>\n                    </tr>\n\n                      <tr>\n                        <td align=\"center\">\n                            <button class='btn btn-block card-button big-text' id=\"modeDisplayA\" onclick=\"changeModeDisplay(0)\" >-1</button>\n                        </td>\n                        <td align=\"center\">\n                            <button class='btn btn-block card-button big-text' id=\"modeDisplayB\" onclick=\"changeModeDisplay(1)\" >-1</button>\n                        </td>\n                        <td align=\"center\">\n                            <button class='btn btn-block card-button big-text' id=\"modeDisplayC\" onclick=\"changeModeDisplay(2)\" >-1</button>\n                        </td>\n                        <td align=\"center\">\n                            <button class='btn btn-block card-button big-text' id=\"modeDisplayD\" onclick=\"changeModeDisplay(3)\" >-1</button>\n                        </td>\n                        <td align=\"center\">\n                            <button width=100% class=\"btn jumbotron-button big-text\" id=\"refreshModePlot\" type=\"button\" onclick=\"initModeEvPlot()\">Refresh</button>\n                        </td>\n                    </tr>\n                </table>\n                <div id=\"modeEvPlot\"></div>\n            </div>\n        </div>\n    </div>\n    <div style='padding-bottom: 25px;'>\n        <div class='card'>\n            <p class='card-title'>Bunch Intensity</p>\n            <div class='card-body'>\n                <div id=\"bunchPlot\"></div>\n            </div>\n        </div>\n    </div>\n    <div style='padding-bottom: 25px;'>\n        <div class='card'>\n            <p class='card-title'>Phase</p>\n            <div class='card-body'>\n                <div id=\"phasePlot\"></div>\n            </div>\n        </div>\n    </div>\n    <div id=\"editModeEvTraceDialog\" title=\"Change Trace\" class='card'>\n        <p class='card-title' id='editModeEvTraceDialogAttribute'>Attribute</p>\n        <div class='card-body'>\n            <table>\n                <tr>\n                    <td width=\"50%\" align=\"left\"><span class=\"tableHeading tableText\">Mode</span></td>\n                    <td width=\"50%\" align=\"right\"><input class=\"form-control tableText\" id=\"modeEvTraceNumber\" type=\"text\" value=\"0\" /></td>\n                </tr>\n            </table>\n        </div>\n    </div>    \n",
        "output": "str",
        "x": 960,
        "y": 940,
        "wires": [
            [
                "b16ee7e3.204338"
            ]
        ]
    },
    {
        "id": "22232285.e3daae",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "navBarIcon",
        "field": "payload.navBarIcon",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "yellowSpaceShip.png",
        "output": "str",
        "x": 270,
        "y": 980,
        "wires": [
            [
                "2469f517.1f76ba"
            ]
        ]
    },
    {
        "id": "b16ee7e3.204338",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "html.user",
        "field": "payload.html.user",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "                <div class='card' id='userCardId'>\n                    <div class='card-body' align=\"center\">\n                        <table width=\"100%\">\n                            <tr>\n                                <td  align=\"left\">\n                                     <span class='card-text' style='color:black;'>User:</span>\n                                </td>\n                                <td  align=\"right\">\n                                     <span class='card-text' id='usernameId'></span>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td  align=\"left\">\n                                    <span class='card-text' style='color:black;'>Time left:</span>\n                                </td>\n                                <td  align=\"right\">\n                                     <span class='card-text' id='expTimeId'></span>\n                                </td>\n                            </tr>\n                        </table>\n                        <table width=\"100%\">\n                            <tr>\n                                <td width=\"40%\">\n                                    <button class='btn btn-block card-button big-text' id='logoutButton' onclick=\"renew()\" >Renew</button>\n                                </td>\n                                <td width=\"10%\"></td>\n                                <td width=\"40%\">\n                                    <button class='btn btn-block card-button big-text' id='logoutButton' onclick=\"logout()\" >Logout</button>\n                                </td>\n                            </tr>\n                        </table>\n                    </div>\n                </div>\n",
        "output": "str",
        "x": 940,
        "y": 980,
        "wires": [
            [
                "62c69fde.c087f"
            ]
        ]
    },
    {
        "id": "cdf4ccbd.a48bd",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "script.user",
        "field": "payload.script.user",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "        function getCreds()\n        {\n            var now = new Date().getTime();\n            var expDate = Number(getCookie('ExpDate'));\n            if (expDate > 0)\n            {\n                expDate = expDate - now;\n                if(expDate < 0)\n                {\n                    logout();\n                }\n                else\n                {\n                    var hours = Math.floor(expDate / 3600000);\n                    var minutes = expDate - hours * 3600000;\n                    minutes = Math.floor(minutes / 60000);\n                    var seconds = expDate - (hours * 3600000) - (minutes * 60000);\n                    seconds = Math.floor(seconds / 1000);\n                    hours = hours.toString();\n                    if (hours.length == 1) hours = '0' + hours; \n                    minutes = minutes.toString();\n                    if (minutes.length == 1) minutes = '0' + minutes; \n                    seconds = seconds.toString();\n                    if (seconds.length == 1) seconds = '0' + seconds; \n                    var timeString = hours + ':' + minutes + ':' + seconds;\n                    $('#usernameId').text(getCookie('Username'));\n                    $('#expTimeId').text(timeString);\n                }\n            }\n            else\n            {\n                $('#usernameId').text(getCookie('Username'));\n                $('#expTimeId').text('Forever');\n            }\n        }\n        function logout()\n        {\n            document.cookie = project + \"Role= ; expires = Thu, 01 Jan 1970 00:00:00 GMT\";\n            document.cookie = project + \"ExpDate= ; expires = Thu, 01 Jan 1970 00:00:00 GMT\";\n            document.cookie = project + \"Username= ; expires = Thu, 01 Jan 1970 00:00:00 GMT\";\n            window.location.href = \"/\";\n        }\n        function renew()\n        {\n            var actionMsg = {};\n            sendActionMsg('renew', 'renew', actionMsg);\n        }\n        function updateCookie(msg)\n        {\n            document.cookie = project + \"Role=\" + msg.role;\n            document.cookie = project + \"ExpDate=\" + msg.expDate;\n            document.cookie = project + \"Username=\" + msg.username;\n        }\n        function downloadToken()\n        {\n            downloadString(getCookie(\"Role\"), \"text/plain\", project + \"-token.txt\");\n        }\n// from https://gist.github.com/danallison/3ec9d5314788b337b682\n        function downloadString(text, fileType, fileName) \n        {\n            var blob = new Blob([text], { type: fileType });\n            \n            var a = document.createElement('a');\n            a.download = fileName;\n            a.href = URL.createObjectURL(blob);\n            a.dataset.downloadurl = [fileType, a.download, a.href].join(':');\n            a.style.display = \"none\";\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            setTimeout(function() { URL.revokeObjectURL(a.href); }, 1500);\n        }",
        "output": "str",
        "x": 630,
        "y": 980,
        "wires": [
            [
                "d3532769.2000a8"
            ]
        ]
    },
    {
        "id": "be5f9d85.ccb1a",
        "type": "subflow:8341090a.df9758",
        "z": "c4285970.3276d8",
        "name": "",
        "x": 1150,
        "y": 1060,
        "wires": []
    },
    {
        "id": "3c4fc4f8.ad1fcc",
        "type": "websocket in",
        "z": "c4285970.3276d8",
        "name": "/oo-display/websocket",
        "server": "d545aab1.0cf9d8",
        "client": "",
        "x": 140,
        "y": 1140,
        "wires": [
            [
                "ffbf08a6.d628b8"
            ]
        ]
    },
    {
        "id": "909a69fe.4e15e8",
        "type": "websocket out",
        "z": "c4285970.3276d8",
        "name": "/oo-display/websocket",
        "server": "d545aab1.0cf9d8",
        "client": "",
        "x": 820,
        "y": 1140,
        "wires": []
    },
    {
        "id": "ffbf08a6.d628b8",
        "type": "link out",
        "z": "c4285970.3276d8",
        "name": "oo-display  Web socket out",
        "links": [
            "2f289f87.fe2ff"
        ],
        "x": 295,
        "y": 1140,
        "wires": []
    },
    {
        "id": "b1a0e1bd.59cdb",
        "type": "link in",
        "z": "c4285970.3276d8",
        "name": "oo-display Web socket in",
        "links": [
            "1cdcbcd8.9514e3"
        ],
        "x": 655,
        "y": 1140,
        "wires": [
            [
                "909a69fe.4e15e8"
            ]
        ]
    },
    {
        "id": "37b71165.57bc2e",
        "type": "http in",
        "z": "c4285970.3276d8",
        "name": "/comfort",
        "url": "/comfort",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 1260,
        "wires": [
            [
                "b5954ab5.ab2818"
            ]
        ]
    },
    {
        "id": "b5954ab5.ab2818",
        "type": "function",
        "z": "c4285970.3276d8",
        "name": "Set Name And Device Type",
        "func": "msg.payload['script'] = {};\nmsg.payload['script']['name'] = msg.payload.name\nmsg.payload['script']['deviceType'] = 'osc-over';\nmsg.payload['script']['project'] = global.get('project');\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 320,
        "y": 1260,
        "wires": [
            [
                "6ce90bff.06d954"
            ]
        ]
    },
    {
        "id": "6473efcd.3f765",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "Set Title",
        "field": "payload.title",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "R3 Comfort Display",
        "output": "str",
        "x": 260,
        "y": 1340,
        "wires": [
            [
                "5a70ff17.d1f4"
            ]
        ]
    },
    {
        "id": "5a70ff17.d1f4",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "script.global",
        "field": "payload.script.global",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "// Global Javascript\n        useWebSockets(true);\n        var mqttDevice = null;\n        var device = null;\n        var pingInterval = 5000;\n        var lastPing = 0;\n        var plotHeight = 450;\n        var titleFontSize = 24;\n        var topMarginSize = 50;\n\n        var oldModesToPlot = [-1,-1,-1,-1];\n        var modesToPlot = [0,1,9,59];\n        var modesToPlotColor = ['blue', 'green', 'orange', 'magenta'];\n        var modesToPlotMarker = ['square', 'circle','triangle', 'x'];\n        var modeDisplayAttrName = ['modeDisplayA', 'modeDisplayB', 'modeDisplayC', 'modeDisplayD'];\n        var modeDisplayEditName = '';\n//        var plotStart = new Date();\n        var modeEvTraceData = [{},{},{},{}];\n        var modeEvLayout = {};\n\n        var restfulDevice = \n        {\n            deviceType  : '{{{payload.script.deviceType}}}',\n            name        : '{{{payload.script.name}}}',\n            project     : '{{{payload.script.project}}}'\n        };\n\n        function onDocumentReady()\n        {\n            setRemoteApp(false);\n            if (remoteApp)\n            {\n                getCreds();\n                setInterval(function(){getCreds();}, 1000);\n            }\n            else\n            {\n                $('#userCardId').hide();\n            }\n            setInterval(function()\n            {\n                var now = new Date().getTime();\n                if ((now - lastPing) > pingInterval)\n                {\n                    lastPing = now;\n                    var actionMsg = \n                        {\n                            topic   : restfulDevice.project + '/' +  restfulDevice.deviceType + '/' +  restfulDevice.name + '/ping',\n                            payload : true\n                        };\n                    sendActionMsg('ping', 'ping', actionMsg);\n               }\n            }, 1000);\n        }\n        function onWebSocketOpen()\n        {\n            acknowledgeDialog('Alert', 'Wait!', 'Contacting the Mother Ship...');\n        }\n        function onWebSocketClose()\n        {\n            \n        }\n        function onWebSocketMessage(msg)\n        {\n            switch(msg.topic)\n            {\n                case 'readings':\n                    if ((msg.mqttDevice.name == restfulDevice.name) && (msg.mqttDevice.deviceType == restfulDevice.deviceType)  && (msg.mqttDevice.project == restfulDevice.project) )\n                    {\n                        lastPing = new Date().getTime();\n                        heartbeat();\n                        device = JSON.parse(pako.inflate(msg.payload, { to: 'string' }));\n                        mqttDevice = msg.mqttDevice;\n                        updateDmaReadings();\n                    }\n                    break;\n                case 'readDatabase':\n                    if (msg.userID == userID)\n                    {\n                    }\n                    break;\n                case 'renew':\n                    if (msg.userID == userID)\n                    {\n                        updateCookie(msg);\n                    }\n                    break;\n                case 'permissionError':\n                    if (msg.userID == userID)\n                    {\n                        acknowledgeDialog('Permission', 'Error', msg.payload);\n                    }\n                    break;\n                case 'loginExpired':\n                    if (msg.userID == userID)\n                    {\n                       location.reload();\n                    }\n                    break;\n                default:\n                    break;\n            }\n        }\n        function updateDmaReadings()\n        {\n            $('#linkQualityId').text(device.linkQuality.value);\n            $('#signalLevelId').text(device.signalLevel.value);\n            phasePlot();\n            modePlot();\n            bunchPlot();\n            dataGlobal();\n            var startModeEvPlot = false;\n            for (var ii = 0; ii < modesToPlot.length; ++ii)\n            {\n                if (modesToPlot[ii] != oldModesToPlot[ii]) \n                {\n                    startModeEvPlot = true;\n                    $('#' + modeDisplayAttrName[ii]).html(modesToPlot[ii].toString());\n                }\n                oldModesToPlot[ii] = modesToPlot[ii];\n            }\n            if (startModeEvPlot)\n            {\n                initModeEvPlot();\n            }\n            updateModeEvPlot();\n            $( \"#acknowledgeDialog\" ).dialog('close');\n        }\n        function dataGlobal()\n        {\n            $(\"#beamCurrent\").text(Math.round(device.beamCurrent.value * 100.0) / 100.0);\n            $(\"#rmsPhase\").text(Math.round(device.rmsModeAmp.value * 100.0) / 100.0);\n            $(\"#maxMode\").text(device.maxDipoleMode.value);\n            $(\"#modeAmplitude\").text(Math.round(device.maxDipoleModeAmp.value * 100.0) / 100.0);\n            $(\"#avgPhase\").text(Math.round(device.avgPhase.value * 100.0) / 100.0);\n        }\n        function phasePlot()\n        {\n            var normalCardStyle = '#575491';\n            var normalCardTitleStyle = '#fdc300';\n            var normalCardBodyStyle = '#9f9dc7';\n            var normalTraceColor = '#575491';\n            var alarmCardStyle = 'red';\n            var alarmCardTitleStyle = 'white';\n            var alarmCardBodyStyle = 'pink';\n            var alarmTraceColor = 'red';\n            \n            var cardStyle = normalCardStyle;\n            var cardTitleStyle = normalCardTitleStyle;\n            var cardBodyStyle = normalCardBodyStyle;\n            var traceColor = normalTraceColor;\n            if (device.beamCurrent.value > 50.0)\n            {\n                if (device.maxDipoleModeAmp.value > device.maxDipoleModeAmp.alarm.limits.high)\n                {\n                    cardStyle = alarmCardStyle;\n                    cardTitleStyle = alarmCardTitleStyle;\n                    cardBodyStyle = alarmCardBodyStyle;\n                    traceColor = alarmTraceColor;\n                }\n            }\n            $('#phaseCard').css('background-color',cardStyle);\n            $('#phaseCardBody').css('background-color',cardBodyStyle);\n            $('#phaseCardTitle').css('color',cardTitleStyle);\n            var ymax = device.maxDipoleModeAmp.alarm.limits.hihi;\n            var layout =\n            {   \n                title: \n                {\n                    text : 'Differential Phase',\n                    font : {size : titleFontSize}\n                },\n                showlegend: false,\n                xaxis: {title: 'Bunch Number'},\n                yaxis: {title: 'phase (deg)', range: [-ymax,ymax]},\n                height: plotHeight,\n                margin: \n                    {\n                        t: topMarginSize, //top margin\n    //                    l: 0, //left margin\n    //                    r: 0, //right margin\n    //                    b: 20 //bottom margin\n                    }\n            };\n            var traceData = [{}];\n            var phase = device.difPhase.value;\n            traceData[0] = {x: [],y: [],name: 'phase', yaxis: 'y1',type: 'bar',marker: {color: traceColor}};\n            for (var ii = 0; ii < phase[0].length; ++ii)\n            {\n                traceData[0].x[ii] = phase[0][ii];\n                traceData[0].y[ii] = phase[1][ii];\n            }\n            Plotly.newPlot('phasePlot', traceData, layout, {displayModeBar: false, staticPlot: true});\n        }\n        function modePlot()\n        {\n            var normalCardStyle = '#575491';\n            var normalCardTitleStyle = '#fdc300';\n            var normalCardBodyStyle = '#9f9dc7';\n            var normalTraceColor = '#575491';\n            var alarmCardStyle = 'red';\n            var alarmCardTitleStyle = 'white';\n            var alarmCardBodyStyle = 'pink';\n            var alarmTraceColor = 'red';\n            \n            var cardStyle = normalCardStyle;\n            var cardTitleStyle = normalCardTitleStyle;\n            var cardBodyStyle = normalCardBodyStyle;\n            var traceColor = normalTraceColor;\n            if (device.beamCurrent.value > 50.0)\n            {\n                if (device.maxDipoleModeAmp.value > device.maxDipoleModeAmp.alarm.limits.high)\n                {\n                    cardStyle = alarmCardStyle;\n                    cardTitleStyle = alarmCardTitleStyle;\n                    cardBodyStyle = alarmCardBodyStyle;\n                    traceColor = alarmTraceColor;\n                }\n            }\n            $('#modeSpectrumCard').css('background-color',cardStyle);\n            $('#modeSpectrumCardBody').css('background-color',cardBodyStyle);\n            $('#modeSpectrumCardTitle').css('color',cardTitleStyle);\n            var ymax = device.maxDipoleModeAmp.alarm.limits.high;\n            var yscale = Math.floor(Math.log10(ymax)) + 1;\n            var layout =\n            {   \n                title: \n                {\n                    text : 'Mode Spectrum',\n                    font : {size : titleFontSize}\n                },\n                xaxis: {title: 'Mode Number'},\n                yaxis: {title: 'Amplitude (deg)', type: 'log', range: [-1,yscale]},\n                shapes: [{\n                            type: 'rect',\n                            xref: 'paper',\n                            x0: 0,\n                            x1: 1,\n                            yref: 'y',\n                            y0: ymax,\n                            y1: ymax + .1,\n                            line: { width: 0},\n                            fillcolor: 'red'\n                        }],\n                height: plotHeight,\n                margin: \n                    {\n                        t: topMarginSize, //top margin\n    //                    l: 0, //left margin\n    //                    r: 0, //right margin\n    //                    b: 20 //bottom margin\n                    }\n            };\n            var modeM = device.modeM.value;\n            var traceData = [{}];\n            traceData[0] = {x: [],y: [],name: 'mode', yaxis: 'y1',type: 'bar',marker: {color: traceColor}};\n            for (var ii = 0; ii < modeM[0].length; ++ii)\n            {\n                traceData[0].x[ii] = modeM[0][ii];\n                traceData[0].y[ii] = modeM[1][ii];\n            }\n            Plotly.newPlot('modePlot', traceData, layout, {displayModeBar: false, staticPlot: true});\n        }\n        function bunchPlot()\n        {\n            var layout =\n            {   \n                title: \n                {\n                    text : 'Bunch Intensity',\n                    font : {size : titleFontSize}\n                },\n                showlegend: false,\n                xaxis: {title: 'Bunch Number'},\n                yaxis: \n                {\n                    title: 'Bunch Current (mA)',\n                    rangemode       : 'tozero'\n                },\n                height: plotHeight,\n                margin: \n                {\n                    t: topMarginSize, //top margin\n//                    l: 0, //left margin\n//                    r: 0, //right margin\n//                    b: 20 //bottom margin\n                },\n                \n            };\n            var bunchCurrent = device.bunchCurrent.value;\n            var traceData = [{}];\n            traceData[0] = {x: [],y: [],name: 'bunch Intensity', yaxis: 'y1',type: 'bar',marker: {color: '#575491'}};\n            for (var ii = 0; ii < bunchCurrent[0].length; ++ii)\n            {\n                traceData[0].x[ii] = bunchCurrent[0][ii];\n                traceData[0].y[ii] = bunchCurrent[1][ii];\n            }\n            Plotly.newPlot('bunchPlot', traceData, layout,  {displayModeBar: false, staticPlot: true});\n        }\n        function absPhasePlot()\n        {\n            var layout =\n            {   \n                title: \n                {\n                    text : 'Absolute Phase',\n                    font : {size : titleFontSize}\n                },\n                showlegend: false,\n                xaxis: {title: 'Bunch Number'},\n                yaxis: {title: 'Phase (deg)'},\n                height: plotHeight,\n                margin: \n                    {\n                        t: topMarginSize, //top margin\n    //                    l: 0, //left margin\n    //                    r: 0, //right margin\n    //                    b: 20 //bottom margin\n                    }\n                \n            };\n            var phase = device.phase.value;\n            var traceData = [{}];\n            traceData[0] = {x: [],y: [],name: 'abs phase', yaxis: 'y1',type: 'bar',marker: {color: '#575491'}};\n            for (var ii = 0; ii < phase[0].length; ++ii)\n            {\n                traceData[0].x[ii] = phase[0][ii];\n                traceData[0].y[ii] = phase[1][ii];\n            }\n            Plotly.newPlot('absPhasePlot', traceData, layout, {displayModeBar: false, staticPlot: true});\n        }\n        function updateModeEvPlot()\n        {\n            var plotableMode = false;\n            for (var imode = 0; imode < modesToPlot.length; ++imode)\n            {\n                if (modesToPlot[imode] > -1) plotableMode = true;\n            }\n            if (!plotableMode) return;\n            $('#refreshModePlot').show();\n\n            var modeM = device.modeM.value;\n//            var xtime = (new Date().getTime() - plotStart.getTime()) / 1000;\n            var xtime = new Date().getTime();\n            for (var imode = 0; imode < modesToPlot.length; ++imode)\n            {\n                if (modesToPlot[imode] > -1)\n                {\n                    modeEvTraceData[imode].x.push(xtime);\n                    modeEvTraceData[imode].y.push(modeM[1][modesToPlot[imode]]);\n                }\n            }\n            if (modeEvTraceData[0].x.length > 1000)\n            {\n                for (var imode = 0; imode < modesToPlot.length; ++imode)\n                {\n                    if (modesToPlot[imode] > -1)\n                    {\n                        modeEvTraceData[imode].x.splice(0,1);\n                        modeEvTraceData[imode].y.splice(0,1);\n                    }\n                }\n            }\n            Plotly.newPlot('modeEvPlot', modeEvTraceData, modeEvLayout, {displayModeBar: false, staticPlot: true});\n        }\n        function initModeEvPlot()\n        {\n            $('#refreshModePlot').hide();\n            \n            for (var imode = 0; imode < modesToPlot.length; ++imode)\n            {\n                if (modesToPlot[imode] > -1)\n                {\n                    modeEvTraceData[imode] = \n                    {\n                        x: [],\n                        y: [],\n                        name: 'Mode ' + modesToPlot[imode].toString(), \n                        yaxis: 'y1',\n                        type: 'scatter',\n//                        mode: 'lines',\n//                        line: {color: modesToPlotColor[imode]}\n                        mode: 'markers',\n                        marker : \n                        {\n                            color: modesToPlotColor[imode],\n                            symbol: modesToPlotMarker[imode],\n                            size: 10\n                        }\n                    };\n                }\n                else\n                {\n                    modeEvTraceData[imode] = {};\n                }\n            }\n            var ymax = device.maxDipoleModeAmp.alarm.limits.high;\n            var yscale = Math.floor(Math.log10(ymax)) + 1;\n            modeEvLayout =\n            {   \n                title: \n                {\n                    text : 'Mode Evolution',\n                    font : {size : titleFontSize}\n                },\n                showlegend: true,\n                legend:\n                {\n                    x: 0,\n                    y: 1, \n                    xanchor: 'left',\n                    \"orientation\": \"h\"\n                },\n                xaxis: \n                {   \n    //                title: 'Time (sec)'\n                    type: 'date'\n                    \n                },\n                yaxis: \n                {\n                    title: 'Mode Amplitude (deg)',\n                    type: 'log', \n                    range: [-1,yscale]\n                },\n                shapes : \n                [\n                    {\n                        type: 'rect',\n                        xref: 'paper',\n                        x0: 0,\n                        x1: 1,\n                        yref: 'y',\n                        y0: ymax,\n                        y1: ymax + .1,\n                        line: { width: 0},\n                        fillcolor: 'red'\n                    }\n                ],\n                height: plotHeight,\n                margin: \n                    {\n                        t: topMarginSize, //top margin\n    //                    l: 0, //left margin\n    //                    r: 0, //right margin\n    //                    b: 20 //bottom margin\n                    },\n            };\n         }\n        function changeModeDisplay(itrace)\n        {\n            $( \"#editDeviceDialog\" ).dialog( \"option\", \"title\", \"Edit\"); \n            $( \"#editModeEvTraceDialogAttribute\").html('Trace ' + (itrace + 1).toString());\n            modeDisplayEditName = modeDisplayAttrName[itrace];\n\n            $( \"#modeEvTraceNumber\").val(modesToPlot[itrace]);\n\n            $( \"#editModeEvTraceDialog\" ).dialog( \"open\" );\n        }\n// Edit Temp JavaScript\n       $( function() \n        {\n            $( \"#editModeEvTraceDialog\" ).dialog(\n                {\n//                    closeOnEscape: false,\n//                    open: function(event, ui) {$(\".ui-dialog-titlebar-close\", ui.dialog | ui).hide();},\n                    width:    640,\n                    autoOpen: false,\n                    buttons:\n                    [\n                        {\n                            text: \"Set\",\n                            click: function() {setModeEvTraceNumber(); $( this ).dialog( \"close\" );},\n                            showText: false\n                        },\n                        {\n                            text: \"Cancel\",\n                            click: function() {$( this ).dialog( \"close\" );},\n                            showText: false\n                        }\n                    ]\n                });\n        } );\n        function setModeEvTraceNumber()\n        {\n            if (isNaN( $('#modeEvTraceNumber').val()) )\n            {\n                acknowledgeDialog('Error', 'Entry not a number!', modeDisplayEditName);\n                return;\n            }\n            var plotIndex = -1;\n            if (modeDisplayEditName == modeDisplayAttrName[0]) plotIndex = 0;\n            if (modeDisplayEditName == modeDisplayAttrName[1]) plotIndex = 1;\n            if (modeDisplayEditName == modeDisplayAttrName[2]) plotIndex = 2;\n            if (modeDisplayEditName == modeDisplayAttrName[3]) plotIndex = 3;\n            modesToPlot[plotIndex]  = Number($('#modeEvTraceNumber').val());\n        }\n        \n",
        "output": "str",
        "x": 630,
        "y": 1260,
        "wires": [
            [
                "cd81193d.7daa28"
            ]
        ]
    },
    {
        "id": "6969a4af.6bed1c",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "javascript",
        "field": "payload.javascript",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "{{{payload.script.global}}}\n{{{payload.script.user}}}\n",
        "output": "str",
        "x": 620,
        "y": 1340,
        "wires": [
            [
                "3cac077e.97ce48"
            ]
        ]
    },
    {
        "id": "7d56a49d.2276bc",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "body",
        "field": "payload.body",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "{{{payload.html.dashboard}}}\n    <div width=\"100%\">\n        <div class='row' style='padding-bottom: 25px;'>\n            <div class='col-md-12'>\n{{{payload.html.user}}}\n            </div>\n        </div>\n    </div>",
        "output": "str",
        "x": 930,
        "y": 1380,
        "wires": [
            [
                "c3a6bfd.e10fe4"
            ]
        ]
    },
    {
        "id": "ff10dfd6.609ae",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "html.wifimon",
        "field": "payload.html.wifimon",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!-- Dashboard HTML -->\n                <div class='card'>\n                    <p class='card-title'>WiFi Connection</p>\n                    <div class='card-body' align=\"center\">\n                        <div class='row'  style='padding-top: 0px;'>\n                            <table width='100%'>\n                                <tr>\n                                    <td width='60%' >\n                                        <span class='card-text' >Device Update</span>\n                                    </td>\n                                    <td width='20%' align='center'></td>\n                                    <td width='20%' align='center'>\n                                        <img src='/img/heartRed.png' id='heartBeatID' width='100px' height='100px'/>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width='60%' >\n                                        <span class='card-text' >Signal Level (dBm)</span>\n                                    </td>\n                                    <td width='20%' align='center'></td>\n                                    <td width='20%' align='center'>\n                                        <span class='card-text' id='signalLevelId' >-100</span>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width='60%' >\n                                        <span class='card-text' >Link Quality (/70)</span>\n                                    </td>\n                                    <td width='20%' align='center'></td>\n                                    <td width='20%' align='center'>\n                                        <span class='card-text' id='linkQualityId' >-1</span>\n                                    </td>\n                                </tr>\n                            </table>\n                        </div>\n                    </div>\n                </div>\n",
        "output": "str",
        "x": 950,
        "y": 1340,
        "wires": [
            [
                "7d56a49d.2276bc"
            ]
        ]
    },
    {
        "id": "3cac077e.97ce48",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "html.dashboard",
        "field": "payload.html.dashboard",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "    <div width='100%' style='padding-bottom: 25px;'>\n        <table  width='100%'>\n            <tr>\n                <td  width='50%'>\n                    <div class='card'  id='modeSpectrumCard'>\n                        <div class='card-body' id='modeSpectrumCardBody'>\n                            <div id=\"modePlot\"></div>\n                        </div>\n                    </div>\n                </td>\n                <td  width='50%'>\n                    <div class='card'>\n                        <div class='card-body'>\n                            <div id=\"bunchPlot\"></div>\n                        </div>\n                    </div>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <div class='card'>\n                        <div class='card-body'>\n                            <div id=\"modeEvPlot\"></div>\n                        </div>\n                    </div>\n                </td>\n                <td>\n                    <div class='card' id='phaseCard'>\n                        <div class='card-body' id='phaseCardBody'>\n                            <div id=\"phasePlot\"></div>\n                        </div>\n                    </div>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <div class='card'>\n                        <div class='card-body'>\n                            <table width='100%' id='modeEvTable'>\n                                <tr>\n                                    <td align=\"center\" width='20%'>\n                                        <span class=\"tableHeading\" style=\"font-size: 30px;\">Tr 1</span>\n                                    </td>\n                                    <td align=\"center\" width='20%'>\n                                        <span class=\"tableHeading\" style=\"font-size: 30px;\">Tr 2</span>\n                                    </td>\n                                    <td align=\"center\" width='20%'>\n                                        <span class=\"tableHeading\" style=\"font-size: 30px;\">Tr 3</span>\n                                    </td>\n                                    <td align=\"center\" width='20%'>\n                                        <span class=\"tableHeading\" style=\"font-size: 30px;\">Tr 4</span>\n                                    </td>\n                                    <td align=\"center\" width='20%'>\n                                    </td>\n                                </tr>\n            \n                                  <tr>\n                                    <td align=\"center\">\n                                        <button class='btn btn-block card-button big-text' id=\"modeDisplayA\" onclick=\"changeModeDisplay(0)\" >-1</button>\n                                    </td>\n                                    <td align=\"center\">\n                                        <button class='btn btn-block card-button big-text' id=\"modeDisplayB\" onclick=\"changeModeDisplay(1)\" >-1</button>\n                                    </td>\n                                    <td align=\"center\">\n                                        <button class='btn btn-block card-button big-text' id=\"modeDisplayC\" onclick=\"changeModeDisplay(2)\" >-1</button>\n                                    </td>\n                                    <td align=\"center\">\n                                        <button class='btn btn-block card-button big-text' id=\"modeDisplayD\" onclick=\"changeModeDisplay(3)\" >-1</button>\n                                    </td>\n                                    <td align=\"center\">\n                                        <button width=100% class=\"btn jumbotron-button big-text\" id=\"refreshModePlot\" type=\"button\" onclick=\"initModeEvPlot()\">Refresh</button>\n                                    </td>\n                                </tr>\n                            </table>\n                        </div>\n                    </div>\n                </td>\n                <td>\n                    <div class='card'>\n                        <div class='card-body' style=\"padding-bottom:10px;\">\n                            <table width='100%'>\n                                <tr>\n                                    <td width='60%' align=\"left\">\n                                        <span class=\"tableHeading big-text\">Max Mode</span>\n                                    </td>\n                                    <td width='40%' align=\"right\">\n                                        <span class=\"card-title\" style=\"color:white;\" id=\"maxMode\"></span>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width='60%' align=\"left\">\n                                        <span class=\"tableHeading big-text\">Mode Amp (deg)</span>\n                                    </td>\n                                    <td width='40%' align=\"right\">\n                                        <span class=\"card-title\" style=\"color:white;\" id=\"modeAmplitude\"></span>\n                                    </td>\n                                 </tr>\n                            </table>\n                        </div>\n                    </div>\n                </td>\n            </tr>\n        </table>\n    </div>\n    <div id=\"editModeEvTraceDialog\" title=\"Change Trace\" class='card'>\n        <p class=\"tableHeading\" style=\"font-size: 30px;\" id='editModeEvTraceDialogAttribute'>Attribute</p>\n        <div class='card-body'>\n            <table>\n                <tr>\n                    <td width=\"50%\" align=\"left\"><span class=\"tableHeading tableText\">Mode</span></td>\n                    <td width=\"50%\" align=\"right\"><input class=\"form-control tableText\" id=\"modeEvTraceNumber\" type=\"text\" value=\"0\" /></td>\n                </tr>\n            </table>\n        </div>\n    </div>    \n",
        "output": "str",
        "x": 960,
        "y": 1260,
        "wires": [
            [
                "3fcdaefb.4b0082"
            ]
        ]
    },
    {
        "id": "6ce90bff.06d954",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "navBarIcon",
        "field": "payload.navBarIcon",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "comfortYellow.png",
        "output": "str",
        "x": 270,
        "y": 1300,
        "wires": [
            [
                "6473efcd.3f765"
            ]
        ]
    },
    {
        "id": "3fcdaefb.4b0082",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "html.user",
        "field": "payload.html.user",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "                <div class='card' id='userCardId'>\n                    <div class='card-body' align=\"center\">\n                        <table width=\"100%\">\n                            <tr>\n                                <td  align=\"left\">\n                                     <span class='card-text' style='color:black;'>User:</span>\n                                </td>\n                                <td  align=\"right\">\n                                     <span class='card-text' id='usernameId'></span>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td  align=\"left\">\n                                    <span class='card-text' style='color:black;'>Time left:</span>\n                                </td>\n                                <td  align=\"right\">\n                                     <span class='card-text' id='expTimeId'></span>\n                                </td>\n                            </tr>\n                        </table>\n                        <table width=\"100%\">\n                            <tr>\n                                <td width=\"40%\">\n                                    <button class='btn btn-block card-button big-text' id='logoutButton' onclick=\"renew()\" >Renew</button>\n                                </td>\n                                <td width=\"10%\"></td>\n                                <td width=\"40%\">\n                                    <button class='btn btn-block card-button big-text' id='logoutButton' onclick=\"logout()\" >Logout</button>\n                                </td>\n                            </tr>\n                        </table>\n                    </div>\n                </div>\n",
        "output": "str",
        "x": 940,
        "y": 1300,
        "wires": [
            [
                "ff10dfd6.609ae"
            ]
        ]
    },
    {
        "id": "cd81193d.7daa28",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "script.user",
        "field": "payload.script.user",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "        function getCreds()\n        {\n            var now = new Date().getTime();\n            var expDate = Number(getCookie('ExpDate'));\n            if (expDate > 0)\n            {\n                expDate = expDate - now;\n                if(expDate < 0)\n                {\n                    logout();\n                }\n                else\n                {\n                    var hours = Math.floor(expDate / 3600000);\n                    var minutes = expDate - hours * 3600000;\n                    minutes = Math.floor(minutes / 60000);\n                    var seconds = expDate - (hours * 3600000) - (minutes * 60000);\n                    seconds = Math.floor(seconds / 1000);\n                    hours = hours.toString();\n                    if (hours.length == 1) hours = '0' + hours; \n                    minutes = minutes.toString();\n                    if (minutes.length == 1) minutes = '0' + minutes; \n                    seconds = seconds.toString();\n                    if (seconds.length == 1) seconds = '0' + seconds; \n                    var timeString = hours + ':' + minutes + ':' + seconds;\n                    $('#usernameId').text(getCookie('Username'));\n                    $('#expTimeId').text(timeString);\n                }\n            }\n            else\n            {\n                $('#usernameId').text(getCookie('Username'));\n                $('#expTimeId').text('Forever');\n            }\n        }\n        function logout()\n        {\n            document.cookie = project + \"Role= ; expires = Thu, 01 Jan 1970 00:00:00 GMT\";\n            document.cookie = project + \"ExpDate= ; expires = Thu, 01 Jan 1970 00:00:00 GMT\";\n            document.cookie = project + \"Username= ; expires = Thu, 01 Jan 1970 00:00:00 GMT\";\n            window.location.href = \"/\";\n        }\n        function renew()\n        {\n            var actionMsg = {};\n            sendActionMsg('renew', 'renew', actionMsg);\n        }\n        function updateCookie(msg)\n        {\n            document.cookie = project + \"Role=\" + msg.role;\n            document.cookie = project + \"ExpDate=\" + msg.expDate;\n            document.cookie = project + \"Username=\" + msg.username;\n        }\n        function downloadToken()\n        {\n            downloadString(getCookie(\"Role\"), \"text/plain\", project + \"-token.txt\");\n        }\n// from https://gist.github.com/danallison/3ec9d5314788b337b682\n        function downloadString(text, fileType, fileName) \n        {\n            var blob = new Blob([text], { type: fileType });\n            \n            var a = document.createElement('a');\n            a.download = fileName;\n            a.href = URL.createObjectURL(blob);\n            a.dataset.downloadurl = [fileType, a.download, a.href].join(':');\n            a.style.display = \"none\";\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            setTimeout(function() { URL.revokeObjectURL(a.href); }, 1500);\n        }",
        "output": "str",
        "x": 630,
        "y": 1300,
        "wires": [
            [
                "6969a4af.6bed1c"
            ]
        ]
    },
    {
        "id": "c3a6bfd.e10fe4",
        "type": "subflow:8341090a.df9758",
        "z": "c4285970.3276d8",
        "name": "",
        "x": 1150,
        "y": 1380,
        "wires": []
    },
    {
        "id": "6a2af549.e4aafc",
        "type": "websocket in",
        "z": "c4285970.3276d8",
        "name": "/comfort/websocket",
        "server": "10999d86.32cb82",
        "client": "",
        "x": 130,
        "y": 1460,
        "wires": [
            [
                "fb7ff61d.e65b38"
            ]
        ]
    },
    {
        "id": "9fa5942b.938528",
        "type": "websocket out",
        "z": "c4285970.3276d8",
        "name": "/comfort/websocket",
        "server": "10999d86.32cb82",
        "client": "",
        "x": 810,
        "y": 1460,
        "wires": []
    },
    {
        "id": "fb7ff61d.e65b38",
        "type": "link out",
        "z": "c4285970.3276d8",
        "name": "rfill  Web socket out",
        "links": [
            "2f289f87.fe2ff"
        ],
        "x": 295,
        "y": 1460,
        "wires": []
    },
    {
        "id": "ef138f17.a4ab5",
        "type": "link in",
        "z": "c4285970.3276d8",
        "name": "rfill Web socket in",
        "links": [
            "1cdcbcd8.9514e3"
        ],
        "x": 655,
        "y": 1460,
        "wires": [
            [
                "9fa5942b.938528"
            ]
        ]
    }
]